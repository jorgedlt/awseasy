
# to do 

### future-features !!! authorize and revoke cidr to security groups

add something to rotate through all AZ's 

ie.. 

 us-east-1
 us-east-2
 us-west-1
 us-west-2
...

 for az in $(aws ec2 describe-regions | grep Endpoint | awk '{print $2}' \
 | cut -d'.' -f2 | grep -v 'sa-east-1' | grep -v 'ca-east-1' ); do

    export AWS_DEFAULT_REGION="$az"
    echo ${RESET}

    echo $az
    echo "      with 4.3 - $(aws lambda list-functions | grep "Runtime" | grep -c nodejs4.3)"
    echo "      not 4.3 - $(aws lambda list-functions | grep "Runtime" | grep -vc nodejs4.3)"
    echo ${RESET}
 done

 ap-south-1
      with 4.3 - 0
      not 4.3 - 0
eu-west-2
      with 4.3 - 0
      not 4.3 0
 ....

#
authorize-security-group-ingress
aws ec2 authorize-security-group-ingress --group-name MySecurityGroup --protocol tcp --port 22 --cidr 203.0.113.0/24

      aws ec2 authorize-security-group-ingress  --group-id sg-0cc0d174 --protocol tcp --port 22 --cidr 98.251.81.179/32  

#
authorize-security-group-egress
aws ec2 authorize-security-group-egress --group-id sg-1a2b3c4d --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "IpRanges": [{"CidrIp": "10.0.0.0/16"}]}]'

describe-stale-security-groups

revoke-security-group-egress

revoke-security-group-ingress

# # @Jorge's HOME 98.251.81.179/32  

aws ec2 revoke-security-group-ingress --group-name MySecurityGroup --protocol tcp --port 22 --cidr 203.0.113.0/24

       aws ec2 revoke-security-group-ingress --group-id sg-0cc0d174 --protocol tcp --port 22 --cidr 98.251.81.179/32  

##

scan an instance and generate the needed data to create another similar ec2

## # Create New Instances -- With larger boot device -- USE THIS ONE
 #
 aws ec2 run-instances --count 1 --image-id ami-2ef48339 --instance-type t2.medium \
  --key-name di-dev-yz-DIYZ-DEV --subnet-id subnet-dbf16cf1 --placement AvailabilityZone=us-east-1b \
  --block-device-mappings "[{\"DeviceName\": \"/dev/sda1\",\"Ebs\":{\"VolumeSize\":32}}]" \
  --security-group-ids sg-c3c0d1bb --user-data file://ec2configs/root-data.sh


diyz-dev-bastion :~$ awsbrief i-077a76a6ea5c7ac4d
   InstanceName: [ DIYZ-DEV-BASTION ] InstanceID: [ i-077a76a6ea5c7ac4d ]
   TYPE: [ t2.small ] ImageId: [ ami-a5b8a1cf ]
   PrivateIP: [ 10.16.0.11 ] PublicIP: [ 52.205.255.45 ]
   SubNet: [ subnet-d8f16cf2 ] VPC: [ vpc-d65cbeb1 ]
   NetIFACE: [ eni-9ab99fbe ] NetMAC: [ 12:af:82:82:20:0f ]
   STATE: [ running ] DATE: [ 2016-04-22T19:28:24.000Z ]
   sg: [ sg-0cc0d174 ] sgNAME: [ DIYZ-DEV-NetworkSecurity-2PU2OAV7DT4D-PublicBastionSG-CO0P6Q0IXHT3 ]
   KEY: [ di-dev-yz-DIYZ-DEV ] AZ: [ us-east-1b ]


###

aws ec2 run-instances \
--count 1 \
--image-id ami-2ef48339 \
--instance-type t2.medium \
 --key-name di-dev-yz-DIYZ-DEV \

 --security-group-ids sg-c3c0d1bb --subnet-id subnet-dbf16cf1 \

 --placement AvailabilityZone=us-east-1b \

 # optional
 --block-device-mappings "[{\"DeviceName\": \"/dev/sda1\",\"Ebs\":{\"VolumeSize\":32}}]" \
 --user-data file://ec2configs/root-data.sh

 aws ec2 create-tags --resources i-xxxxxxxx --tags Key=Name,Value=MyInstance


[--associate-public-ip-address | --no-associate-public-ip-address]
[--cli-input-json <value>]
[--generate-cli-skeleton]
