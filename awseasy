#!/usr/bin/env bash

# awseasy - an AWS CLI assited scripts
#
# written by jorgedlt@gmail.com - 2016 Jun 28

#  sameAs - Colorized out
sameAs () {
  echo "${GRAY} executing command: ${BLUE} $1 ${RESET}"
}

#  basedOn - Colorized out
basedOn () {
  echo "${GRAY} based on: ${BLUE} $1 ${RESET}"
}

#  alsoTry - Colorized out
alsoTry () {
  echo "${GRAY} also try: ${BLUE} $1 ${RESET}"
}

#  sideHead - Colorized out
sideHead () {
  echo; echo "${GREEN} ${1}: ${RESET}"
}

#  divText - Colorized out
divText () {
  echo "${GRAY} ==== ${CYAN} $1 ${GRAY} ==== ${RESET}"
}

#  singleDUMP - Colorized out
singleDUMP () {
  echo "    ${GRAY}$1: [ ${YELLOW}$2 ${GRAY}]"
}

#  descDUMP - Colorized out
descDUMP () {
  echo "    ${GRAY}$1: [ ${YELLOW}$2 ${GRAY}] $3: [ ${YELLOW}$4 ${GRAY}]"
}

#  doubleDUMP - Colorized out
doubleDUMP () {
  echo "    ${GRAY}$1: [ ${YELLOW}$2 ${GRAY}] $3: [ ${YELLOW}$4 ${GRAY}]"
}

#  singlewide - Colorized out - 1x out and no square brackets
singlewide () {
  echo "    ${GRAY}$1: ${GREEN}$2 ${GRAY}"
}

#  doublewide - Colorized out - similar to descDUMP but GREEN
doublewide () {
  echo "    ${GRAY}$1: [ ${GREEN}$2 ${GRAY}] $3: [ ${GREEN}$4 ${GRAY}]"
}

#  triplewide - Colorized out - similar to descDUMP but GREEN
triplewide () {
  echo "    ${GRAY}$1: [ ${GREEN}$2 ${GRAY}] $3: [ ${GREEN}$4 ${GRAY}] $5: [ ${GREEN}$6 ${GRAY}]"
}

###

#  awstag - AWS -- Any AWS Element re-tag
awstag () {
  aws ec2 create-tags --resources "${1}" --tags Key=Name,Value="${2}"
  sameAs 'aws ec2 create-tags --resources <InstanceId> --tags Key=Name,Value=<NewLabel>'
}

#.  awsls - AWS ALL -- Scan and display aws regions, previously ec2ls
awsls () {

  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');
  triplewide Account $myACCNTID Alias $myACCOUNT Region $myREGION; echo ${RESET}

  divText "AWS Regions"
  aws ec2 describe-regions | grep RegionName | cut -d':' -f2 | tr -d ' |,|"' | sort -r | uniq
  echo
  sameAs 'aws ec2 describe-regions'

   echo == More info on AWS Regions - http://docs.aws.amazon.com/general/latest/gr/rande.html
}

# the cf functions - needs to be in its own file

#.
#. AWS Cloud Front Commands
#.

#.  cfls - AWS Cloud Front -- List Cloud Front distributions
cfls ()
{
    CFlist=$( aws cloudfront list-distributions | grep -w 'Id' | egrep -v '\.|-' | cut -d':' -f2 | tr -d ' |"|:|,' );
    for CFid in $CFlist;
    do
        CFdesc=$( aws cloudfront get-distribution --id "${CFid}" );

         _CFstatus=$(_ec2parse "$CFdesc" Status);
         _CFdomain=$(_ec2parse "$CFdesc" DomainName);
         _CFtarget=$(_ec2parse "$CFdesc" TargetOriginId);

         descDUMP 'Cloud Front id' $CFid Status $_CFstatus;
         descDUMP  DomainName $_CFdomain Target $_CFtarget;

         echo ' ';
     done
     sameAs "aws cloudfront get-distribution --id ${CFid}"
 }
#

#.  cfstat - AWS Cloud Front -- Status Cloud Front distributions
cfstat ()
{
if (( $# < 1 )); then
   echo usage: Needs at least one argument {Cloud Front ID}
 return
fi

CFid=$1
#
echo Cloud Front $CFid BETA
         CFdesc=$( aws cloudfront get-distribution --id "${CFid}" );

         _CFstatus=$(_ec2parse "$CFdesc" Status);
         _CFdomain=$(_ec2parse "$CFdesc" DomainName);
         _CFtarget=$(_ec2parse "$CFdesc" TargetOriginId);
         _CFetag=$(_ec2parse "$CFdesc" ETag);
         _CFcomment=$(_ec2parse "$CFdesc" Comment);
         _CFbucket=$(_ec2parse "$CFdesc" Bucket);
         _CFtprefix=$(_ec2parse "$CFdesc" prefix);
         _CFminttl=$(_ec2parse "$CFdesc" MinTTL);
         _CFmaxttl=$(_ec2parse "$CFdesc" MaxTTL);

         DomianCF=$( echo "$CFdesc"  | grep DomainName | head -1 | cut -d':' -f2 | tr -d '"| ' )
         DomianTR=$( echo "$CFdesc"  | grep DomainName | tail -1 | cut -d':' -f2 | tr -d '"| ' )

         CFAllowedMethods=$( echo "$CFdesc" \
          | jq  .Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items \
          | tr '\012' ' ' | tr -s ' ' )

         CFCachedMethods=$( echo "$CFdesc" \
          | jq  .Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items \
          | tr '\012' ' ' | tr -s ' ' )

         CFForwardedValues=$( echo "$CFdesc" \
          | jq  .Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items \
          | tr '\012' ' ' | tr -s ' ' )

         # CFOriginSslProtocols=$( echo "$CFdesc" \
         # | jq  .Distribution.DistributionConfig.Origins.Items.0.CustomOriginConfig.OriginSslProtocols.Items \
         # | tr '\012' ' ' | tr -s ' ' )

         descDUMP 'Cloud Front id' $CFid Status $_CFstatus;
         descDUMP  DomainName $_CFdomain Target $_CFtarget;
         descDUMP  Etag $_CFetag Comment $_CFcomment;
         descDUMP  'S3 Bucket' $_CFbucket prefix $_CFtprefix;
         descDUMP  MinTTL $_CFminttl MaxTTL $_CFmaxttl;

         echo; echo
         singlewide 'DomainName Cloud Front' "$DomianCF"
         singlewide '     DomainName Target' "$DomianTR"

         echo
         singlewide ForwardedValues "$CFForwardedValues"
         singlewide AllowedMethods "$CFAllowedMethods"
         singlewide CachedMethods "$CFCachedMethods"
         # singlewide 'SSL Protocols' "$CFOriginSslProtocols"

         echo ' ';
         sameAs "aws cloudfront get-distribution --id ${CFid}"

 }

#.  cfdump - AWS Cloud Front -- Dump Cloud Front distributions JSON
cfdump ()
{
if (( $# < 1 )); then
   echo usage: Needs at least one argument {Cloud Front ID}
 return
 fi

CFid=$1
#
echo Cloud Front $CFid BETA
         aws cloudfront get-distribution --id "${CFid}" | jq .
         echo ' ';
         sameAs "cloudfront get-distribution --id "${CFid}""

 }

# the trails functions - needs to be in its own file

#.
#. AWS Cloud Trails Commands
#.

#.  trailsls - AWS Cloud Trails -- Account wide summary of events and uniq counts
trailsls ()
{
  aws cloudtrail lookup-events --query Events[].EventName | tr -d '"| |,|[|]' | grep -v '^$' | sort | uniq -c | ccze -A
}

#.  trailslong - AWS Cloud Trails -- ls -long -full list - not working as expected
trailslong ()
{
  aws cloudtrail lookup-events --query 'Events[*].[EventId, EventName, Username]' | jq . | tr '\012' ' ' | tr '[' '\012' | tr -s ' ' | tr -d '' | tr -d '"|,|]' | sort -k2,3 | awk '{ print $2 " " $3 " " $1 }' | column -t
}

#.  trailswhat - AWS Cloud Trails -- full dump based on EventName ( displays WHO also )
trailswhat ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { EventName };
    return;
  fi;
  eWHAT=$1
  aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=${eWHAT} | jq .
  sameAs "aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=${eWHAT}"
}
# aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=ConsoleLogin

#.  trailswho - AWS Cloud Trails -- full dump based on Username { Username };
trailswho ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Username };
    return;
  fi;

  eWHO=$1
  aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${eWHO}  | jq .
  sameAs "aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${eWHO}"
}

#.  trailswhols - AWS Cloud Trails -- brief listing based on Username { Username };
trailswhols ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Username };
    return;
  fi;

  eWHO=$1
  aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${eWHO} | grep EventName | sort | uniq -c
  sameAs "aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${eWHO}"
}

#.  trailsroot - AWS Cloud Trails -- full dump based by ROOT's actions
trailsroot ()
{
  aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=root | jq .
  sameAs "aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=root"
}

# #.  trailsscan - AWS Cloud Trails -- Account Wide Scan
# trailsscan ()
# {
#     awsREGIONS=$( aws ec2 describe-regions | grep RegionName | cut -d':' -f2 | tr -d ' |,|"' | sort -r | uniq );
#     for thisregion in $awsREGIONS;
#     do
#         echo ${RESET}$thisregion;
#         export AWS_DEFAULT_REGION=$thisregion;
#         EventsTR=$( aws cloudtrail lookup-events --query Events[].EventName | tr -d '"| |,|[|]' );
#         [ -z "$EventsTR" ] && {
#              :
#          } || {
#              echo "  some Events found this region $thisregion in the last 7 days";
#              aws cloudtrail lookup-events --query Events[].EventName | tr -d '"| |,|[|]' | grep -v '^$' | sort | uniq -c | ccze -A ;
#              echo =====================================================================
#          };
#      done
#  }

 # trailslist (long)
 # aws cloudtrail describe-trails | jq .

 #  trailsdetails
 # aws cloudtrail describe-trails --trail-name-list Default

 # trailsval
 # aws cloudtrail validate-logs --trail-arn arn:aws:cloudtrail:us-east-1:123456789012:trail/Trail1 --start-time 20160129T19:00:00Z
 # aws cloudtrail validate-logs --trail-arn arn:aws:cloudtrail:us-east-1:674553401808:trail/Default --start-time 20170525T00:00:00Z

 # http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-cli.html

 # aws cloudtrail get-trail-status --name Default

source ~/.awseasy/awseasy.ec2
source ~/.awseasy/awseasy.iam
source ~/.awseasy/awseasy.vpc
source ~/.awseasy/awseasy.rds
source ~/.awseasy/awseasy.lda
source ~/.awseasy/awseasy.net
source ~/.awseasy/awseasy.asg
source ~/.awseasy/awseasy.elb
source ~/.awseasy/awseasy.gen
source ~/.awseasy/awseasy.s3c
source ~/.awseasy/awseasy.spt
source ~/.awseasy/awseasy.vol
source ~/.awseasy/awseasy.prf
source ~/.awseasy/awseasy.hth

# fin
