# awseasy.gen

#.
#. General Commands
#.

#.  awseasy-version - Display Current Version
awseasy-version() {
  aws --version
  echo AWSEASY VERSION:
  cat ~/.awseasy/awseasy.ver | ccze -A
}

#.  awshelp - AWS CLI -- Help Screen
awshelp() {
  sameAs "cat ~/.awseasy/awseasy | grep '^#\.'"

echo ${CYAN}

[  $# == 0 ] && {
    cat ~/.awseasy/awseasy* | grep -v old | grep '^#\.'
    echo
    sameAs "help available on ec2 iam ver net rds asg lda vpc"
    return;
  }

[  $# == 1 ] && {
    topic=$(echo $1 | tr 'A-Z' 'a-z')
    cat ~/.awseasy/awseasy* | grep "${topic}" | grep -v old | grep '^#\.'
    return;
}

echo ${RESET}
}

#.  awsupdate - AWS CLI -- update awscli and required packages
awsupdate() {
  echo -n "${RESET}${WHITE}"
      aws --version
      read -r -p "Are you sure you want to update the AWS CLI environment? [y/N] " response
  echo "${RESET}"

  [[ $response =~ ^([yY][eE][sS]|[yY])$ ]] && {

  [[ "$OSTYPE" == "linux-gnu" ]] && {

       echo "${CYAN} executing command: ${GRAY} sudo apt-get -y install figlet ccze ${RESET}"
       sudo apt-get -y install figlet ccze

       echo "${CYAN} executing command: ${GRAY} sudo pip install pjson awscli --upgrade ${RESET}"
       pip install --upgrade pip
       sudo pip install pjson
       sudo -H pip install awscli --upgrade

       echo ${CYAN}Environment updated attempted, currently at${GREEN}
         aws --version
       echo -n ${RESET}
       }

  [[ "$OSTYPE" == "darwin"* ]] && {

      echo "${CYAN} executing command: ${GRAY} sudo brew install figlet ccze ${RESET}"
      brew install figlet ccze

      echo "${CYAN} executing command: ${GRAY} sudo -H pip install  --upgrade pip ${RESET}"
      sudo -H pip install --upgrade pip
      echo "${CYAN} executing command: ${GRAY} brew upgrade jq ${RESET}"
      brew upgrade jq                                        # replaced pjson
      brew update

      # brew list and brew cask list # to list all brew installed packages

      echo "${CYAN} executing command: ${GRAY} sudo -H pip install awscli --upgrade ${RESET}"
      sudo -H pip install awscli --upgrade

      echo ${CYAN}Environment updated attempted, currently at${GREEN}
        aws --version
      echo -n ${RESET}
      }

  } || {
    :
    echo ${CYAN}Environment not updated${GREEN}
      aws --version
    echo -n ${RESET}
  }
}

#.  lpaccounts - AWS CLI -- loops the given command in all known accounts
lpaccounts() {

      if (( $# < 1 )); then
        echo usage: Needs at least one argument { run command };
        return;
      fi;

# Scan Users Accross Accounts - depends on a valid $HOME/.aws-keys
SBDawsacnts=$(cat $HOME/.aws-keys | grep function | sed -e 's/function x/!!!/g' |
sed -n -e '/!!!/,$p' | grep -v '\-' | grep -v '!!!' |
sed -e 's/function./ /g' | tr -d ' ' | tr -d '\{' | sed '/.Stest/,$!d')
#
for i in $SBDawsacnts
do
    $i
    # usrls | grep maiolo
    $1
    echo =====================================================================

    # Scan for a given user across all known accounts
    #   usrls | grep maiolo
    # Scan and count the number S3 bucklets across all known accounts
    #   s3ls | wc -l
done
#
}


#.  lpregions - AWS CLI -- loops the given command in all known regions
lpregions() {

    if (( $# < 1 )); then
         echo usage: Needs at least one argument
         return
    fi

    awsREGIONS=$( aws ec2 describe-regions | grep RegionName | cut -d':' -f2 | tr -d ' |,|"' | sort -r | uniq );
    for thisregion in $awsREGIONS;
    do
            echo ${RESET}$thisregion;
            export AWS_DEFAULT_REGION=$thisregion;
            EventsTR=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,VpcId,InstanceType,PrivateIpAddress,PublicIpAddress,Tags[?Key==`Name`].Value[]]' --output json | tr -d '\n[] "');

            [ -z "$EventsTR" ] && {
                :
            } || {
                echo "  some EC2 found this region $thisregion";
                $1
                echo =====================================================================
            };
            done
17 };
}

#### Finding Similar UBUNTU AMI across AWS Regions
# highly experimental feature

remove_last_comma() {
  sed '$x;$G;/\(.*\),/!H;//!{$!d}; $!x;$s//\1/;s/^\n//'
} # needed as json list returned by ubuntu site is mal-formed

#.  whichu - AWS CLI -- Finds similar UBUNTU AMI across AWS Regions
whichu () {

if (( $# < 1 )); then
 echo usage: Needs at least one argument {"16.04" "eu-central-1" "hvm:ebs" "x86_64"}
 return
fi

# example - 'whichu 16.04' works with all other values comining from default settings
myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');
# Name=root-device-type,Values=ebs Name=architecture,Values=x86_64 Name=name,Values='*hvm-ssd/ubuntu-trusty-14.04*'
    uversion="${1:-16.04}"
    uregion="${2:-$myREGION}"
    utype="${3:-hvm}"
    uvolm="${4:-ebs}"
    uarch="${5:-x86_64}"

ubuntuAMI=$( aws ec2 describe-images \
    --region ${uregion} \
    --owners 099720109477 \
    --filters Name=root-device-type,Values=${uvolm} Name=architecture,Values=${uarch} Name=name,Values="*hvm-ssd/*${uversion}*" \
    --query 'sort_by(Images, &Name)[-1].ImageId' | tr -d '"')

  sameAs "aws ec2 describe-images .... "; echo

  echo "Please Ubuntu AMI ${YELLOW}$ubuntuAMI${RESET} for AWS Region ${YELLOW}${uregion}${RESET}"

}
#

# # #  alternative
# curl -s "https://cloud-images.ubuntu.com/locator/ec2/releasesTable" \
#     | remove_last_comma \
#     | jq -c ".aaData[] | select(contains([${uversion}, ${uregion}, ${utype}\:${uvolm}]))" \
#     | grep -o 'ami-[a-z0-9]\+' | head -1
# }

#
# ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20160907.1 EBS / HVM ver 1
#
# export AWS_DEFAULT_REGION=us-east-1  ; export EC2_ami="ami-cd0f5cb6"    # VA
# export AWS_DEFAULT_REGION=us-east-2  ; export EC2_ami="ami-10547475"    # Ohio
# export AWS_DEFAULT_REGION=us-west-1  ; export EC2_ami="ami-09d2fb69"    # NORCAL
# export AWS_DEFAULT_REGION=us-west-2  ; export EC2_ami="ami-6e1a0117"    # OR
# export AWS_DEFAULT_REGION=eu-west-2  ; export EC2_ami="ami-746aba14"    # London

# original article:
# https://askubuntu.com/questions/53582/how-do-i-know-what-ubuntu-ami-to-launch-on-ec2/533491#533491?newreg=344b0808d512414e8454915d812693ec
#

####
