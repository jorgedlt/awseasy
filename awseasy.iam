# awseasy.iam

#. AWS IAM Commands
#.

#. USERs
#.  usrls - AWS IAM -- List AWS IAM users
usrls ()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');
  triplewide Account $myACCNTID Alias $myACCOUNT Region $myREGION; echo ${RESET}

  aws iam list-users --output json | grep 'UserName' | cut -d':' -f2 | tr -d '"| |,' | sort | uniq
}

#.  usrstat - AWS IAM -- Display details on a given Username
usrstat ()
{
  aws iam get-user --user-name $1 | jq . 2> /dev/null  # check user is valid
  [ $? -ne 0 ] && { echo "$1 : Not a valid user" ; } || {

  echo 'groups'
        aws iam list-groups-for-user --user-name $1 | grep 'GroupName'
  }
}

#.  usrsum - AWS IAM -- Account wide scan of groups and affiliations of a given user
usrsum()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');

  triplewide Account $myACCNTID Alias $myACCOUNT Region $myREGION; echo ${RESET}
    export u=$1

    divText $u
      aws iam get-user --user-name $u | grep PasswordLastUsed | tr -d '"|,' | tr -s ' '
    sideHead "RECENT-ACTIONS-LAST-7-DAYS"
      aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$u | grep EventName | sort | uniq -c | tr -s ' '
    sideHead "ACCESS-KEYS"
      aws iam list-access-keys --user-name $u | egrep "AccessKeyId|Status"
    sideHead "MFA-DEVICES"
      aws iam list-mfa-devices --user-name $u | egrep "SerialNumber|EnableDate"
    sideHead "GROUPS"
      aws iam list-groups-for-user --user-name $u | grep "GroupName"
    sideHead "POLICIES"
      aws iam list-attached-user-policies --user-name $u | grep "PolicyName"
    echo
}

#
#  last do - AWS IAM -- Display last events of a given user within a AWS region
# aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${1} | grep EventName | sort | uniq -c
#
# last time
# aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${1} | grep EventTime | sort | uniq | tail -1 | cut -d':' -f2 | cut -d'.' -f1 | tr -d ' '
#
# better to use 'usrsum'
#

#.  usradd  - AWS IAM -- Add an AWS IAM user
usradd ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument {instance ID#};
    return;
  fi;
  aws iam create-user --user-name $1 | jq .
}

#.  usrdel  - AWS IAM -- Delete an AWS IAM user, along with all affiliation
usrdel ()
{

if (( $# < 1 )); then
  echo usage: Needs at least one argument {instance ID#};
  return;
fi;

thisUSER=$1
# access-key
  sideHead "checking for access-keys"
  thisKEY=$(aws iam list-access-keys --user-name $thisUSER | grep AccessKeyId | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisKEY" ] && {
  for k in $thisKEY; do
     aws iam delete-access-key --access-key-id $k --user-name $thisUSER
  done
  }

# signing-certificates
  sideHead "checking for signing-certificates"
  thisCERT=$(aws iam list-signing-certificates --user-name $thisUSER | grep CertificateId | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisCERT" ] && {
  for c in $thisCERT; do
     aws iam delete-signing-certificate --certificate-id $c --user-name $thisUSER
  done
  }

# login-profile
  sideHead "checking for login-profile"
  thisPROF=$( aws iam get-login-profile --user-name $thisUSER 2> /dev/null )
  [ "$thisPROF" ] && {
    aws iam delete-login-profile --user-name $thisUSER
  }

# mfa-devices
  sideHead "checking for mfa-devices"
  thisMFA=$( aws iam list-mfa-devices --user-name $thisUSER | grep SerialNumber | cut -d':' -f2- | tr -d '"| |,' 2> /dev/null )
  [ "$thisMFA" ] && {
  for m in $thisMFA; do
    aws iam deactivate-mfa-device --serial-number $m --user-name $thisUSER
  done
  }

# attached-user-policies
  sideHead "checking for attached-user-policies"
  thisPOL=$( aws iam list-attached-user-policies --user-name $thisUSER | grep PolicyArn | cut -d':' -f2- | tr -d ' |"' 2> /dev/null )
  [ "$thisPOL" ] && {
  for p in $thisPOL; do
    aws iam detach-user-policy --policy-arn $p --user-name $thisUSER
  done
  }

# delete use from groups
  sideHead "checking for groups"
  thisGRP=$(aws iam list-groups-for-user --user-name $thisUSER | grep GroupName | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisGRP" ] && {
  for g in $thisGRP; do
    aws iam remove-user-from-group --group-name $g --user-name $thisUSER
  done
  }

# then finally delete-user
  sideHead "attempting to DELETE $thisUSER"
    aws iam delete-user --user-name $thisUSER
}

#.
#.  urslsgrp - AWS IAM -- Display list of groups for a given user
urslsgrp ()
{
if (( $# < 1 )); then
  echo usage: Needs at least one argument { GROUPNAME };
  return;
fi;
#
   aws iam list-groups-for-user --user-name ${1} | jq .
}

#.  grplsusr - AWS IAM -- Display list of users for a given group
grplsusr ()
{
if (( $# < 1 )); then
  echo usage: Needs at least one argument { GROUPNAME };
  return;
fi;
#
   aws iam get-group --group-name ${1} | jq .
}

#.
#. GROUPs
#.   grpls  - AWS IAM -- Display list of account groups
grpls ()
{
   aws iam list-groups | jq .
   sameAs "aws iam list-groups"
}

#.   grpadd - AWS IAM -- Create an AWS/IAM group
grpadd ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { GROUPNAME};
    return;
  fi;
  aws iam create-group --group-name ${1} | jq .
  sameAs "aws iam create-group  --group-name  ${1}"
}

#.   grpdel - AWS IAM -- Delete an AWS/IAM group
grpdel ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Group2Delete };
    return;
  fi;
  aws iam delete-group --group-name ${1}
  sameAs "aws iam delete-group  --group-name  ${1}"
}

#.   grppolls - AWS IAM -- group LIST policy (for a given group)
grppolls ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Group };
    return;
  fi;
    aws iam list-group-policies --group-name ${1} | jq .
    sameAs "aws iam get-policy --group-name  ${1}"
}

#.   grppoladd - AWS IAM -- group ADD policy
grppoladd ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two argument { Group Policy-Arn };
    return;
  fi;
    aws iam attach-group-policy --group-name ${1} --policy-arn ${2}
    sameAs "aws iam get-policy --group-name  ${1} --policy-arn ${2}"
}

#.    grppoldel - AWS IAM -- group DELETE policy
grppoldel ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two argument { Group Policy-Arn };
    return;
  fi;
 aws iam delete-group-policy --group-name ${1} --policy-arn ${2}
 sameAs "aws iam delete-group-policy --group-name ${1} --policy-arn ${2}"
}

#.   grppolstat - AWS IAM -- get details on policy
grppolstat ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Policy-Arn };
    return;
  fi;
    aws iam get-policy --policy-arn ${1} | jq .
    sameAs "aws iam get-policy --group-name ${1}"
}

#.   grpusradd - AWS IAM -- ADD user to group
grpusradd ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two arguments { --user-name Bob --group-name Admins };
    return;
  fi;
    aws iam add-user-to-group --user-name ${1} --group-name ${2} | jq .
    sameAs "aws iam add-user-to-group  --user-name ${1} --group-name ${2}"
}

#.   grpusrdel - AWS IAM -- DEL user to group
grpusrdel ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two arguments { --user-name Bob --group-name Admins };
    return;
  fi;
    aws iam remove-user-from-group --user-name ${1} --group-name ${2}
    sameAs "aws iam remove-user-from-group --user-name ${1} --group-name ${2}"
}

# AWS Tasks that Require Account Root User
# http://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html

#.
#. MFAs

#.   usrmfals  - AWS IAM -- LIST mfa devices
usrmfals ()
{
   # aws iam list-virtual-mfa-devices
   aws iam list-virtual-mfa-devices | egrep 'SerialNumber|PasswordLastUsed|CreateDate' \
   | tr -d '"|,| ' | sed 's/P/    P/g' | sed 's/C/    C/g ' | sed -e 's/S/\\\nS/g' | ccze -A
   sameAs 'aws iam list-virtual-mfa-devices'
}
# aws iam list-virtual-mfa-devices

#.   usrmfastat  - AWS IAM -- STAT mfa devices
usrmfastat ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one arguments { --user-name USER-NAME };
    return;
  fi;
    aws iam list-mfa-devices --user-name ${1} | jq .
}
# aws iam list-mfa-devices --user-name testuser200

#.   usrmfaadd - AWS IAM -- ADD MFA for a given user
usrmfaadd ()
{
  if (( $# < 3 )); then
    echo usage: Needs at least three arguments;
    echo '   MFAdevName Base32StringSeed TXTfile'
    echo '   MFAdevName QRCodePNG PNGfile'
    return;
  fi;
    aws iam create-virtual-mfa-device --virtual-mfa-device-name ${1} --bootstrap-method ${2} --outfile ${3} | jq .
    sameAs "aws iam create-virtual-mfa-device --virtual-mfa-device-name ${1} --bootstrap-method ${2} --outfile ${3}"
}
# aws iam create-virtual-mfa-device --virtual-mfa-device-name testuser200 --bootstrap-method Base32StringSeed  --outfile testusermfa.txt
# aws iam create-virtual-mfa-device --virtual-mfa-device-name testuser200 ---bootstrap-method QRCodePNG -outfile testuser.png

#.   usrmfadea - AWS IAM -- DEACTIVATE MFA for a given user
usrmfadea ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two arguments { --user-name USER-NAME --serial-number ARN-MFA-USER };
    return;
  fi;
    aws iam delete-virtual-mfa-device --user-name ${1} --serial-number ${2}
    sameAs 'aws iam delete-virtual-mfa-device --user-name USER-NAME'
}
# aws iam deactivate-mfa-device --user-name hamid.montazeri --serial-number arn:aws:iam::674553401808:mfa/hamid.montazeri

#.   usrmfadel - AWS IAM -- DELETE MFA for a given user
usrmfadel ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one arguments { --serial-number ARN-MFA-USER };
    return;
  fi;
    aws iam delete-virtual-mfa-device --serial-number ${1}
    sameAs 'delete-virtual-mfa-device --serial-number ARN-MFA-USER'
}
# aws iam delete-virtual-mfa-device --serial-number arn:aws:iam::674553401808:mfa/testuser200

#  resync-mfa-device  -- aws iam resync-mfa-device --user-name Bob --serial-number arn:aws:iam::210987654321:mfa/BobsMFADevice --authentication-code-1 123456 --authentication-code-2 987654

#.
#. ACCESS KEYs

#.   usrakls - AWS IAM -- access key LIST for a given user
usrakls ()
{
  AWSusers=$(aws iam list-users --output json | grep UserName | cut -d':' -f2 | tr -d ' |"|,' | sort | uniq)
  for u in $AWSusers; do
    divText $u
    aws iam list-access-keys --user-name ${u} | jq .
  done
  sameAs 'aws iam list-access-keys --user-name USER-NAME'

}

#.   usrakstat - AWS IAM -- access key DETAILS for a given user
usrakstat ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --user-name USER-NAME }'
    return;
  fi;
    aws iam list-access-keys --user-name ${1} | jq .
    sameAs 'aws iam list-access-keys --user-name USER-NAME'
}

#.   usrakadd - AWS IAM -- access key ADD for a given user
usrakadd ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --user-name USER-NAME }'
    return;
  fi;
    aws iam create-access-key --user-name ${1} | jq .
    sameAs 'aws iam create-access-key --user-name USER-NAME'
}

# (be sure and grab new secret key)

# usrakset act/dea - accesskey activate / deactivate for a given user  [  Active / Inactive ]
# aws iam update-access-key --access-key-id AKIAJFJJYXVZ2X74MRQQ --status Active --user-name c_stmd_phillips
# aws iam update-access-key --access-key-id AKIAJFJJYXVZ2X74MRQQ --status Inactive --user-name c_stmd_phillips

#.   usraklast - AWS IAM -- LAST ACTION with given access key
usraklast ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --user-name USER-NAME }'
    return;
  fi;
    aws iam get-access-key-last-used --access-key-id ${1} | jq .
    sameAs 'aws iam get-access-key-last-used --access-key-id ACCESS-KEY'
}

#.   usrakdel - AWS IAM -- access key DEL for a given user
usrakdel ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least one argument { --access-key ACCESS-KEY --user-name USER-NAME}'
    return;
  fi;
    aws iam delete-access-key --access-key ${1} --user-name ${2} | jq .
    sameAs 'aws iam delete-access-key --access-key ACCESS-KEY --user-name USER-NAME'
}

#.
#. PASSWORDs

#.   usrpwinit - AWS IAM -- INIT user password - needed for fist time
usrpwinit ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least two argument { --user-name USER-NAME --password NEWPASSWD }'
    return;
  fi;
    aws iam get-access-key-last-used --access-key-id ${1} | jq .
    sameAs 'aws iam get-access-key-last-used --access-key-id ACCESS-KEY'
}
# aws iam create-login-profile --user-name MyUser --password TXlVc2VyCg$$

#.   usrpwrst - AWS IAM -- RESET user password - will also set a flag for reset on login
usrpwrst ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least two argument { --user-name USER-NAME --password NEWPASSWD }'
    return;
  fi;
    aws iam get-access-key-last-used --user-name ${1} --password ${2} --password-reset-required | jq .
    sameAs 'aws iam get-access-key-last-used --access-key-id ACCESS-KEY'
}
# aws iam update-login-profile --user-name matthew.baumgartner --password TXlVc2FOOVyCg$$ --password-reset-required

#. POLICYs

#.   polawsls  - AWS IAM -- LIST AWS of account groups
polawsls ()
{
   aws iam list-policies --scope AWS | jq .
   sameAs 'aws iam list-policies'
}
# aws iam list-policies

#.   polallls  - AWS IAM -- LIST ALL of account groups
polallls ()
{
  aws iam list-policies | jq .   # No Scope
   sameAs 'aws iam list-policies'
}
# aws iam list-policies

#.   polusrls  - AWS IAM -- Display list-attached-user-policies per given User
polusrls ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --user-name USER-NAME }'
    return;
  fi;
    aws iam list-attached-user-policies --user-name ${1} | jq .
    sameAs 'aws iam list-attached-user-policies --user-name USER-NAME'
}
# aws iam list-attached-userpolicies --group-name MyTestGroup2

#.   polgrpls  - AWS IAM -- Display list-attached-group-policies per given GROUP
polgrpls ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --group-name GROUP-NAME }'
    return;
  fi;
    aws iam list-attached-group-policies --group-name ${1} | jq .
    sameAs 'aws iam list-attached-group-policies --group-name GROUP-NAME'
}
# aws iam list-attached-group-policies --group-name MyTestGroup2

#.   polgrpatt  - AWS IAM -- ATTACH list-attached-group-policies per given GROUP
polgrpatt ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least one argument { --policy-arn ARM --group-name GROUP-NAME }'
    return;
  fi;
    aws iam attach-group-policy  --policy-arn ${1} --group-name ${2} | jq .
    sameAs 'aws iam attach-group-policy  --group-name GROUP-NAME'
}
# aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess --group-name MyTestGroup2

#.   polgrpdet  - AWS IAM -- DETTACH list-attached-group-policies per given GROUP
polgrpdet ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least one argument { --policy-arn ARM --group-name GROUP-NAME }'
    return;
  fi;
    aws iam detach-group-policy  --policy-arn ${1} --group-name ${2} | jq .
    sameAs 'aws iam ldetach-group-policy --group-name GROUP-NAME'
}
# aws iam detach-group-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess --group-name MyTestGroup2

#.
#. SIGN-CERTs
#.
#. PROFILEs
#.
#. Reports & Summaaries
#.
#.  iamsummary - AWS IAM -- Display account summary
iamsummary ()
{
    aws iam get-account-summary | jq .
    sameAs 'aws iam get-account-summary'
}

#.  iampolls - AWS IAM -- Display password policy
iampolls ()
{
    aws iam get-account-password-policy | jq .
    sameAs 'aws iam get-account-password-policy'
}

#.  iampolset - AWS IAM -- Display password policy
iampolset ()
{

echo 'Cut & Paste the floowing template, after editing. '
echo
echo  ${YELLOW}
echo  'aws iam update-account-password-policy \  '
echo  '  --minimum-password-length 14 \          '
echo  '  --allow-users-to-change-password \      '
echo  '  --require-lowercase-characters \        '
echo  '  --require-uppercase-characters \        '
echo  '  --require-numbers \                     '
echo  '  --password-reuse-prevention 8 \         '
echo  '  --no-hard-expiry \                      '
echo  '  --max-password-age 120                  '
echo

echo  ${RESET}
sameAs 'aws iam update-account-password-policy'
}

#.
#.  iamreport - AWS IAM -- Account wide scan of users, groups and affiliation
iamreport()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');

  triplewide Account $myACCNTID Alias $myACCOUNT Region $myREGION; echo ${RESET}
  divText root
  aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=root | grep EventName | sort | uniq -c | column -t
  echo

  AWSusers=$(aws iam list-users --output json | grep UserName | cut -d':' -f2 | tr -d ' |"|,' | sort | uniq)
  for u in $AWSusers; do
    divText $u
      aws iam get-user --user-name $u | grep PasswordLastUsed | tr -d '"|,' | tr -s ' '

    sideHead "RECENT-ACTIONS-LAST-7-DAYS"
      aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$u | grep EventName | sort | uniq -c | tr -s ' '
    sideHead "ACCESS-KEYS"
      aws iam list-access-keys --user-name $u | egrep "AccessKeyId|Status"
    sideHead "MFA-DEVICES"
      aws iam list-mfa-devices --user-name $u | egrep "SerialNumber|EnableDate"
    sideHead "GROUPS"
      aws iam list-groups-for-user --user-name $u | grep "GroupName"
    sideHead "POLICIES"
        aws iam list-attached-user-policies --user-name $u | grep "PolicyName"
    echo
done
}

# fin
