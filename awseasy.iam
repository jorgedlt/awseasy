# awseasy.iam

#.
#. AWS IAM Commands
#.

#.  iamls - AWS IAM -- List AWS IAM users
iamls ()
{
  aws iam list-users --output json | grep 'UserName' | cut -d':' -f2 | tr -d '"| |,' | sort | uniq
}
#

#.  iamstat - AWS IAM -- Display details on a given Username
iamstat ()
{
  aws iam get-user --user-name $1 2> /dev/null  # check user is valid
  [ $? -ne 0 ] && { echo "$1 : Not a valid user" ; } || {

  echo 'groups'
        aws iam list-groups-for-user --user-name $1 | grep 'GroupName'
  }
}

#.  iamstat - AWS IAM -- Account wide scan of users, groups and affiliation
iamreport()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');

  echo "Account: [ $myACCNTID ] Alias: [ $myACCOUNT ] Region: [ $myREGION ]"; echo

  echo == [ root ] ============================
  aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=root | grep EventName | sort | uniq -c
  echo

  AWSusers=$(aws iam list-users --output json | grep UserName | cut -d':' -f2 | tr -d ' |"|,' | sort | uniq)
  for u in $AWSusers; do
    echo == [ $u ] ============================

    #echo "PASSWORDLASTUSED:"
      aws iam get-user --user-name $u | grep PasswordLastUsed | tr -d '"|,' | tr -s ' '
    echo
    echo "RECENT-ACTIONS-LAST-7-DAYS:"
      aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$u | grep EventName | sort | uniq -c | tr -s ' '
    echo
    echo "ACCESS-KEYS:"
      aws iam list-access-keys --user-name $u | egrep "AccessKeyId|Status"
    echo "MFA-DEVICES:"
      aws iam list-mfa-devices --user-name $u | egrep "SerialNumber|EnableDate"
    echo "GROUPS:"
      aws iam list-groups-for-user --user-name $u | grep "GroupName"
    echo
done
}

# iamreport | enscript -o - | pstopdf -i -o ~/Desktop/iamreport.pdf ## create as PDF

#.  iamuser - AWS IAM -- Account wide scan of groups and affiliations of a given user
iamuser()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');

  echo "Account: [ $myACCNTID ] Alias: [ $myACCOUNT ] Region: [ $myREGION ]"; echo
  #
    export u=$1

    echo == [ $u ] ============================

    #echo "PASSWORDLASTUSED:"
      aws iam get-user --user-name $u | grep PasswordLastUsed | tr -d '"|,' | tr -s ' '
    echo
    echo "RECENT-ACTIONS-LAST-7-DAYS:"
      aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$u | grep EventName | sort | uniq -c | tr -s ' '
    echo
    echo "ACCESS-KEYS:"
      aws iam list-access-keys --user-name $u | egrep "AccessKeyId|Status"
    echo "MFA-DEVICES:"
      aws iam list-mfa-devices --user-name $u | egrep "SerialNumber|EnableDate"
    echo "GROUPS:"
      aws iam list-groups-for-user --user-name $u | grep "GroupName"
    echo
} # with or without ccze -A

#.  iamlsdo - AWS IAM -- Display last events of a given user within a AWS region
iamlsdo ()
{
    aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${1} \
    | grep EventName | sort | uniq -c
}

#.  iamsummary - AWS IAM -- Display account summary
iamsummary ()
{
    aws iam get-account-summary | jq .
}

#.  iamsummary - AWS IAM -- Display password policy
iampolicy ()
{
    aws iam get-account-password-policy | jq .
}

#.  iamuadd - AWS IAM -- Add an AWS IAM user
iamuadd ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument {instance ID#};
    return;
  fi;

  aws iam create-user --user-name $1
}

#. iamuakey  [active/inactive] -- coming soon
#. iamuapass [reset]           -- coming soon
#. iamuamfa  [deactivate]      -- coming soon

#.  iamudel - AWS IAM -- Delete an AWS IAM user, along with all affiliation
iamudel ()
{

if (( $# < 1 )); then
  echo usage: Needs at least one argument {instance ID#};
  return;
fi;

thisUSER=$1

# access-key
  thisKEY=$(aws iam list-access-keys --user-name $thisUSER |
       grep AccessKeyId | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ $thisKEY ] && {
  for k in $thisKEY; do
     aws iam delete-access-key --access-key-id $k --user-name $thisUSER
  done
  }

# signing-certificates
  thisCERT=$(aws iam list-signing-certificates --user-name $thisUSER |
       grep CertificateId | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ $thisCERT ] && {
  for c in $thisCERT; do
     aws iam delete-signing-certificate --certificate-id $c --user-name $thisUSER
  done
  }

# login-profile - delete
  thisPROF=$(aws iam get-login-profile --user-name $thisUSER 2> /dev/null)
  [ $thisPROF ] && {
    aws iam delete-login-profile -user-name $thisUSER
  }

# mfa-devices
  thisMFA=$(aws iam list-mfa-devices --user-name $thisUSER |
     grep SerialNumber | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ $thisMFA ] && {
  for m in $thisMFA; do
    aws iam deactivate-mfa-device --serial-number $m --user-name $thisUSER
  done
  }

# attached-user-policies
  thisPOL=$(aws iam list-attached-user-policies --user-name $thisUSER |
      grep PolicyName | cut -d':' -f2- | tr -d ' |"' 2> /dev/null )
  [ $thisPOL ] && {
  for p in $thisPOL; do
    aws iam detach-user-policy --policy-name $p --user-name $thisUSER 
  done
  }

# delete use from groups
  thisGRP=$(aws iam list-groups-for-user --user-name $thisUSER |
      grep GroupName | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ $thisGRP ] && {
  for g in $thisGRP; do
    aws iam remove-user-from-group --group-name $g --user-name $thisUSER
  done
  }

# then finally delete-user
    aws iam delete-user --user-name $thisUSER
}

# fin
