# awseasy.iam

#. AWS IAM Commands
#.

#. USERs
#.  usrls - AWS IAM -- List AWS IAM users
usrls ()
{
  aws iam list-users --output json | grep 'UserName' | cut -d':' -f2 | tr -d '"| |,' | sort | uniq | ccze -A
}

#.  usrstat - AWS IAM -- Display details on a given Username
usrstat ()
{
  aws iam get-user --user-name $1 | jq . 2> /dev/null  # check user is valid
  [ $? -ne 0 ] && { echo "$1 : Not a valid user" ; } || {

  echo 'groups'
        aws iam list-groups-for-user --user-name $1 | grep 'GroupName'
  }
}

#.  usrsum - AWS IAM -- Account wide scan of groups and affiliations of a given user
usrsum()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');

  echo "Account: [ $myACCNTID ] Alias: [ $myACCOUNT ] Region: [ $myREGION ]"; echo
    export u=$1

    echo == [ $u ] ============================

      aws iam get-user --user-name $u | grep PasswordLastUsed | tr -d '"|,' | tr -s ' '
    echo
    echo "RECENT-ACTIONS-LAST-7-DAYS:"
      aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$u | grep EventName | sort | uniq -c | tr -s ' '
    echo
    echo "ACCESS-KEYS:"
      aws iam list-access-keys --user-name $u | egrep "AccessKeyId|Status"
    echo "MFA-DEVICES:"
      aws iam list-mfa-devices --user-name $u | egrep "SerialNumber|EnableDate"
    echo "GROUPS:"
      aws iam list-groups-for-user --user-name $u | grep "GroupName"
    echo
}

#.  iamlsdo - AWS IAM -- Display last events of a given user within a AWS region
iamlsdo ()
{
    aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${1} \| grep EventName | sort | uniq -c
}

#.  usradd  - AWS IAM -- Add an AWS IAM user
usradd ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument {instance ID#};
    return;
  fi;
  aws iam create-user --user-name $1 | jq .
}

#.  usrdel  - AWS IAM -- Delete an AWS IAM user, along with all affiliation
usrdel ()
{

if (( $# < 1 )); then
  echo usage: Needs at least one argument {instance ID#};
  return;
fi;

thisUSER=$1
# access-key
  echo checking for access-keys ...
  thisKEY=$(aws iam list-access-keys --user-name $thisUSER | grep AccessKeyId | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisKEY" ] && {
  for k in $thisKEY; do
     aws iam delete-access-key --access-key-id $k --user-name $thisUSER
  done
  }

# signing-certificates
  echo checking for signing-certificates ...
  thisCERT=$(aws iam list-signing-certificates --user-name $thisUSER | grep CertificateId | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisCERT" ] && {
  for c in $thisCERT; do
     aws iam delete-signing-certificate --certificate-id $c --user-name $thisUSER
  done
  }

# login-profile
  echo checking for login-profile ...
  thisPROF=$( aws iam get-login-profile --user-name $thisUSER 2> /dev/null )
  [ "$thisPROF" ] && {
    aws iam delete-login-profile --user-name $thisUSER
  }

# mfa-devices
  echo checking for mfa-devices ...
  thisMFA=$( aws iam list-mfa-devices --user-name $thisUSER | grep SerialNumber | cut -d':' -f2- | tr -d '"| |,' 2> /dev/null )
  [ "$thisMFA" ] && {
  for m in $thisMFA; do
    aws iam deactivate-mfa-device --serial-number $m --user-name $thisUSER
  done
  }

# attached-user-policies
  echo checking for attached-user-policies ...
  thisPOL=$( aws iam list-attached-user-policies --user-name $thisUSER | grep PolicyArn | cut -d':' -f2- | tr -d ' |"' 2> /dev/null )
  [ "$thisPOL" ] && {
  for p in $thisPOL; do
    aws iam detach-user-policy --policy-arn $p --user-name $thisUSER
  done
  }

# delete use from groups
  echo checking for groups  ...
  thisGRP=$(aws iam list-groups-for-user --user-name $thisUSER | grep GroupName | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisGRP" ] && {
  for g in $thisGRP; do
    aws iam remove-user-from-group --group-name $g --user-name $thisUSER
  done
  }

# then finally delete-user
  echo attempting to DELETE [ $thisUSER ] ...
    aws iam delete-user --user-name $thisUSER
}

#.
#.  urslsgrp - AWS IAM -- Display list of groups for a given user
urslsgrp ()
{
if (( $# < 1 )); then
  echo usage: Needs at least one argument { Group2Create};
  return;
fi;
#
   aws iam list-groups-for-user --user-name ${1} | jq .
}

#.  grplsusr - AWS IAM -- Display list of users for a given group
grplsusr ()
{
if (( $# < 1 )); then
  echo usage: Needs at least one argument { Group2Display};
  return;
fi;
#
   aws iam get-group --group-name ${1} | jq .
}

#.
#. GROUPs
#.   grpls  - AWS IAM -- Display list of account groups
grpls ()
{
    aws iam list-groups | jq .
}

#.   grpadd - AWS IAM -- Create an AWS/IAM group
grpadd ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Group2Create};
    return;
  fi;
  aws iam create-group --group-name ${1} | jq .
}

#.   grpdel - AWS IAM -- Delete an AWS/IAM group
grpdel ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Group2Delete };
    return;
  fi;
  aws iam delete-group --group-name ${1}
}

#.   grppolls - AWS IAM -- group LIST policy (for a given group)
grppolls ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Group };
    return;
  fi;
    aws iam list-group-policies --group-name ${1} | jq .
}

#.   grppoladd - AWS IAM -- group ADD policy
grppoladd ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two argument { Group Policy-Arn };
    return;
  fi;
    aws iam attach-group-policy --group-name ${1} --policy-arn ${2}
}

#.    grppoldel - AWS IAM -- group DELETE policy
grppoldel ()
{
if (( $# < 2 )); then
 echo usage: Needs at least two argument { Group Policy-Arn };
 return;
fi;
 aws iam delete-group-policy --group-name ${1} --policy-arn ${2}
}

#.   grppolstat - AWS IAM -- get details on policy
grppolstat ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Policy-Arn };
    return;
    fi;
    aws iam get-policy --policy-arn ${1} | jq .
}

#.   grpusradd - AWS IAM -- ADD user to group
grpusradd ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two arguments { --user-name Bob --group-name Admins };
    return;
    fi;
    aws iam add-user-to-group --user-name ${1} --group-name ${2} | jq .
}

#.   grpusrdel - AWS IAM -- DEL user to group
grpusrdel ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two arguments { --user-name Bob --group-name Admins };
    return;
    fi;
    aws iam remove-user-from-group --user-name ${1} --group-name ${2}
}

# AWS Tasks that Require Account Root User
# http://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html

#.
#. MFAs
# usrmfals list for given user
#.  iamuamfa  - AWS IAM -- [deactivate]      -- coming soon
# usrmfals - aws iam list-mfa-devices --user-name c_stmd_phillips | jq .
# not sure how it works
#                     -- aws iam enable-mfa-device --user-name Bob --serial-number arn:aws:iam::210987654321:mfa/BobsMFADevice --authentication-code-1 123456 --authentication-code-2 789012
#  resync-mfa-device  -- aws iam resync-mfa-device --user-name Bob --serial-number arn:aws:iam::210987654321:mfa/BobsMFADevice --authentication-code-1 123456 --authentication-code-2 987654
#
# aws iam delete-virtual-mfa-device --serial-number arn:aws:iam::123456789012:mfa/MFATest

#. ACCESS KEYs
# this really should be a parameterless cmd which displays all keys
#.   usrakls - AWS IAM -- access key LIST for a given user
usrakls ()
{
  AWSusers=$(aws iam list-users --output json | grep UserName | cut -d':' -f2 | tr -d ' |"|,' | sort | uniq)
  for u in $AWSusers; do
    divText $u
    aws iam list-access-keys --user-name ${u} | jq .
  done
}

# usrakstat - accesskey more details for a given user
#.   usrakstat - AWS IAM -- access key DETAILS for a given user
usrakstat ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { --user-name Bob }
    return;
  fi;
    aws iam list-access-keys --user-name ${1} | jq .
}

#.   usrakadd - AWS IAM -- access key ADD for a given user
usrakadd ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { --user-name Bob }
    return;
  fi;
    aws iam create-access-key --user-name ${1} | jq .

    SameAs aws iam create-access-key --user-name stanley_user | jq .
}

# (be sure and grab new secret key)

# usrakset act/dea - accesskey activate / deactivate for a given user  [  Active / Inactive ]
# aws iam update-access-key --access-key-id AKIAJFJJYXVZ2X74MRQQ --status Active --user-name c_stmd_phillips
# aws iam update-access-key --access-key-id AKIAJFJJYXVZ2X74MRQQ --status Inactive --user-name c_stmd_phillips

# get-access-key-last-used !!!  -- aws iam get-access-key-last-used --access-key-id AKIAJFJJYXVZ2X74MRQQ
# aws iam get-access-key-last-used --access-key-id AKIAISIOSCPUU3JJLFLA | jq .

# usrakdel - accesskey DEL for a given user
# aws iam delete-access-key --access-key AKIAIJUM5RBCTODD6OXA --user-name c_stmd_phillips

#. PASSWORDs
#  iamuapass - AWS IAM -- [reset]           -- coming soon

#. POLICYs

# aws iam list-attached-group-policies --group-name PowerUsers  # --scope AWS


#. SIGN-CERTs
#. PROFILEs
# aws iam list-attached-group-policies --group-name S3ReadOnlyAccess

# MISC
# aws iam generate-credential-report
# Wait until a particular condition is satisfied.
# aws iam user-exists --user-name MyTestUser1 # kinda works ??

#.
#.  iamsummary - AWS IAM -- Display account summary
iamsummary ()
{
    aws iam get-account-summary | jq .
}

#.  iampolicy - AWS IAM -- Display password policy
iampolicy ()
{
    aws iam get-account-password-policy | jq .
}

#.
#.  iamreport - AWS IAM -- Account wide scan of users, groups and affiliation
iamreport()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');

  triplewide "Account $myACCNTID Alias $myACCOUNT Region $myREGION"; echo

  divText root
  aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=root | grep EventName | sort | uniq -c
  echo

  AWSusers=$(aws iam list-users --output json | grep UserName | cut -d':' -f2 | tr -d ' |"|,' | sort | uniq)
  for u in $AWSusers; do
    divText $u

      aws iam get-user --user-name $u | grep PasswordLastUsed | tr -d '"|,' | tr -s ' '
    echo
    echo "RECENT-ACTIONS-LAST-7-DAYS:"
      aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$u | grep EventName | sort | uniq -c | tr -s ' '
    echo
    echo "ACCESS-KEYS:"
      aws iam list-access-keys --user-name $u | egrep "AccessKeyId|Status"
    echo "MFA-DEVICES:"
      aws iam list-mfa-devices --user-name $u | egrep "SerialNumber|EnableDate"
    echo "GROUPS:"
      aws iam list-groups-for-user --user-name $u | grep "GroupName"
    echo
done
}

#.
# iamreport | enscript -o - | pstopdf -i -o ~/Desktop/iamreport.pdf ## create as PDF

# detail of policy -- aws iam get-policy --policy-arn arn:aws:iam::674553401808:policy/PowerUserAccess-NoMarketplaceControl | jq .
# Lists all the managed policies that are available
#
# policy list [READONLY, ]    -- aws iam list-policies --max-items 2
#               -- aws iam list-policies | grep PolicyName | grep FullAccess
#
#              # AdministratorAccess # PowerUserAccess # SystemAdministrator # AmazonWorkSpacesAdmin
#              # DatabaseAdministrator # NetworkAdministrator # AmazonAPIGatewayAdministrator
#              aws iam list-attached-group-policies --group-name Administ
#
#              aws iam list-attached-group-policies --group-name PowerUsers
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/PreventProdAccess"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/ManageOwnMFA"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/IAMReadOnlyAccess-201509161017"   ???
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/PowerUserAccess-NoMarketplaceControl"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/PreventIAMOnTrueAdmins"
#
#              aws iam list-attached-group-policies --group-name Developers     #DevPLUS Lambda or API
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/PreventProdAccess"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/ManageOwnMFA"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/IAMReadOnlyAccess-201509161017"   ???
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/PowerUserAccess-NoMarketplaceControl"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/PreventIAMOnTrueAdmins"
#
#              aws iam list-attached-group-policies --group-name S3FullAccess
#                          "PolicyArn": "arn:aws:iam::aws:policy/AmazonS3FullAccess"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/IAMReadOnlyAccess-201509161017"   ???
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/PreventProdAccess"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/ManageOwnMFA"
#                          "PolicyArn": "arn:aws:iam::674553401808:policy/PreventIAMOnTrueAdmins"
#
#              aws iam list-attached-group-policies --group-name S3ReadOnlyAccess
#
#

# fin
                                                                                                                                                                                                                                                                                       
