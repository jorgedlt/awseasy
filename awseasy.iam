# awseasy.iam

#. AWS IAM Commands
#.

#. USERs
#.  usrls - AWS IAM -- List AWS IAM users
usrls ()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');
  triplewide Account $myACCNTID Alias $myACCOUNT Region $myREGION; echo ${RESET}

  aws iam list-users --output json | grep 'UserName' | cut -d':' -f2 | tr -d '"| |,' | sort | uniq
  sameAs "aws iam list-users"
}

#.  usrstat - AWS IAM -- Account wide scan of groups and affiliations of a given user
usrstat()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');

  triplewide Account $myACCNTID Alias $myACCOUNT Region $myREGION; echo ${RESET}
    export u=$1

    divText $u
      aws iam get-user --user-name $u | grep PasswordLastUsed | tr -d '"|,' | tr -s ' '
    sideHead "RECENT-ACTIONS-LAST-7-DAYS"
      aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$u | grep EventName | sort | uniq -c | column -t
    sideHead "ACCESS-KEYS"
      aws iam list-access-keys --user-name $u | egrep "AccessKeyId|Status"
    sideHead "MFA-DEVICES"
      aws iam list-mfa-devices --user-name $u | egrep "SerialNumber|EnableDate"
    sideHead "GROUPS"
      aws iam list-groups-for-user --user-name $u | grep "GroupName"
    sideHead "POLICIES"
      aws iam list-attached-user-policies --user-name $u | grep "PolicyName"
      aws iam list-user-policies --user-name $u | jq .
    echo
    basedOn "aws iam get-user, list-access-keys, list-mfa-devices list-groups-for-user, list-attached-user-policies"
}

#
#  last do - AWS IAM -- Display last events of a given user within a AWS region
# aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${1} | grep EventName | sort | uniq -c
#
# last time
# aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${1} | grep EventTime | sort | uniq | tail -1 | cut -d':' -f2 | cut -d'.' -f1 | tr -d ' '
#
# better to use 'usrsum'
#

#.  usradd  - AWS IAM -- ADD an AWS IAM user
usradd ()
{
  if (( $# < 1 )); then
    echo ${CYAN}
    echo "         Add User  -- ${GREEN}usradd NEWUSER${CYAN}"
    echo "        Init User  -- ${GREEN}usrpwinit NEWUSER 111222333aBa!@# ${CYAN}"
    echo "       Reset User  -- ${GREEN}usrpwrst NEWUSER 333222111AbA#@! ${CYAN} -forces user password reset"
    echo ' '
    echo "     Find a Group  -- ${GREEN}grpls    ${CYAN} -pick a group from list"
    echo "add User to Group  -- ${GREEN}grpusradd NEWUSER GROUP2ADD ${CYAN}"
    echo ' '
    echo 'Securely send to user;'
    echo '      login URL  http://'$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$').signin.aws.amazon.com
    echo '       password  TEMPPASSWORD'
    echo '          group  ASSIGNEDGRP'
    echo ${RESET}
    return;
  fi;
  aws iam create-user --user-name $1 | jq .
  sameAs "aws iam create-user --user-name ${1}"
}

#.  usrchange  - AWS IAM -- CHANGE an AWS IAM user
usrchange ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two argument { --user-name Bob --new-user-name Robert };
    return;
  fi;
  aws iam update-user  --user-name ${1} --new-user-name ${2}| jq .
  sameAs "aws iam update-user  --user-name ${1} --new-user-name ${2}"
}
# usrchange - aws iam update-user --user-name Bob --new-user-name Robert

#.  usrdel  - AWS IAM -- DELETE an AWS IAM user, along with all affiliation
usrdel ()
{

if (( $# < 1 )); then
  echo usage: Needs at least one argument {instance ID#};
  return;
fi;

thisUSER=$1
# access-key
  sideHead "checking for access-keys"
  thisKEY=$(aws iam list-access-keys --user-name $thisUSER | grep AccessKeyId | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisKEY" ] && {
  for k in $thisKEY; do
     aws iam delete-access-key --access-key-id $k --user-name $thisUSER
  done
  }

# signing-certificates
  sideHead "checking for signing-certificates"
  thisCERT=$(aws iam list-signing-certificates --user-name $thisUSER | grep CertificateId | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisCERT" ] && {
  for c in $thisCERT; do
     aws iam delete-signing-certificate --certificate-id $c --user-name $thisUSER
  done
  }

# login-profile
  sideHead "checking for login-profile"
  thisPROF=$( aws iam get-login-profile --user-name $thisUSER 2> /dev/null )
  [ "$thisPROF" ] && {
    aws iam delete-login-profile --user-name $thisUSER
  }

# mfa-devices
  sideHead "checking for mfa-devices"
  thisMFA=$( aws iam list-mfa-devices --user-name $thisUSER | grep SerialNumber | cut -d':' -f2- | tr -d '"| |,' 2> /dev/null )
  [ "$thisMFA" ] && {
  for m in $thisMFA; do
    aws iam deactivate-mfa-device --serial-number $m --user-name $thisUSER
  done
  }

# attached-user-policies
  sideHead "checking for attached-user-policies"
  thisPOL=$( aws iam list-attached-user-policies --user-name $thisUSER | grep PolicyArn | cut -d':' -f2- | tr -d ' |"' 2> /dev/null )
  [ "$thisPOL" ] && {
  for p in $thisPOL; do
    aws iam detach-user-policy --policy-arn $p --user-name $thisUSER
  done
  }

# delete use from groups
  sideHead "checking for groups"
  thisGRP=$(aws iam list-groups-for-user --user-name $thisUSER | grep GroupName | cut -d':' -f2 | tr -d '"| ' 2> /dev/null )
  [ "$thisGRP" ] && {
  for g in $thisGRP; do
    aws iam remove-user-from-group --group-name $g --user-name $thisUSER
  done
  }

# then finally delete-user
  sideHead "attempting to DELETE ${WHITE} $thisUSER ${RESET}"
    aws iam delete-user --user-name $thisUSER

  basedOn "aws iam delete-access-key, deactivate-mfa-device, detach-user-policy, remove-user-from-group, delete-user"; echo
}

#.
#.  urslsgrp - AWS IAM -- Display list of groups for a given user
urslsgrp ()
{
if (( $# < 1 )); then
  echo usage: Needs at least one argument { GROUPNAME };
  return;
fi;
#
   aws iam list-groups-for-user --user-name ${1} | jq .
   sameAs "aws iam list-groups-for-user --user-name  ${1}"; echo
}

#.  grplsusr - AWS IAM -- Display list of users for a given group
grplsusr ()
{
if (( $# < 1 )); then
  echo usage: Needs at least one argument { GROUPNAME };
  return;
fi;
#
   aws iam get-group --group-name ${1} | jq .
   sameAs "aws iam get-group --group-name  ${1}"; echo
}

#.
#. GROUPs
#.   grpls  - AWS IAM -- Display list of account groups
grpls ()
{
   aws iam list-groups | jq .
   sameAs "aws iam list-groups"; echo
}

#.   grpadd - AWS IAM -- Create an AWS/IAM group
grpadd ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { GROUPNAME};
    return;
  fi;
  aws iam create-group --group-name ${1} | jq .
  sameAs "aws iam create-group  --group-name  ${1}"; echo
}

#.   grpdel - AWS IAM -- Delete an AWS/IAM group
grpdel ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Group2Delete };
    return;
  fi;
  aws iam delete-group --group-name ${1}
  sameAs "aws iam delete-group  --group-name  ${1}"; echo
}

#.   grppolls - AWS IAM -- group LIST policy (for a given group)
grppolls ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Group };
    return;
  fi;
    aws iam list-group-policies --group-name ${1} | jq .
    sameAs "aws iam get-policy --group-name  ${1}"; echo
}

#.   grppoladd - AWS IAM -- group ADD policy
grppoladd ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two argument { Group Policy-Arn };
    return;
  fi;
    aws iam attach-group-policy --group-name ${1} --policy-arn ${2}
    sameAs "aws iam get-policy --group-name  ${1} --policy-arn ${2}"; echo
}

#.    grppoldel - AWS IAM -- group DELETE policy
grppoldel ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two argument { Group Policy-Arn };
    return;
  fi;
 aws iam delete-group-policy --group-name ${1} --policy-arn ${2}
 sameAs "aws iam delete-group-policy --group-name ${1} --policy-arn ${2}"; echo
}

#.   grppolstat - AWS IAM -- get details on policy
grppolstat ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one argument { Policy-Arn };
    return;
  fi;
    aws iam get-policy --policy-arn ${1} | jq .
    sameAs "aws iam get-policy --group-name ${1}"; echo
}

#.   grpusradd - AWS IAM -- ADD user to group
grpusradd ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two arguments { --user-name Bob --group-name Admins };
    return;
  fi;
    aws iam add-user-to-group --user-name ${1} --group-name ${2} | jq .
    sameAs "aws iam add-user-to-group  --user-name ${1} --group-name ${2}"; echo
}

#.   grpusrdel - AWS IAM -- DEL user to group
grpusrdel ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two arguments { --user-name Bob --group-name Admins };
    return;
  fi;
    aws iam remove-user-from-group --user-name ${1} --group-name ${2}
    sameAs "aws iam remove-user-from-group --user-name ${1} --group-name ${2}"; echo
}

# AWS Tasks that Require Account Root User
# http://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html

#.
#. MFAs

#.   usrmfals  - AWS IAM -- LIST mfa devices
usrmfals ()
{
   # aws iam list-virtual-mfa-devices
   aws iam list-virtual-mfa-devices | egrep 'SerialNumber|PasswordLastUsed|CreateDate' \
   | tr -d '"|,| ' | sed 's/P/    P/g' | sed 's/C/    C/g ' | sed -e 's/S/\\\nS/g'
   sameAs 'aws iam list-virtual-mfa-devices' ; echo
}
# aws iam list-virtual-mfa-devices

#.   usrmfastat  - AWS IAM -- STAT mfa devices
usrmfastat ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one arguments { --user-name USER-NAME };
    return;
  fi;
    aws iam list-mfa-devices --user-name ${1} | jq .
    sameAs "aws iam list-mfa-devices --user-name ${1}" ; echo
}
# aws iam list-mfa-devices --user-name testuser200

#.   usrmfaadd - AWS IAM -- ADD MFA for a given user
usrmfaadd ()
{
  if (( $# < 3 )); then
    echo usage: Needs at least three arguments;
    echo '   MFAdevName Base32StringSeed TXTfile'
    echo '   MFAdevName QRCodePNG PNGfile'
    return;
  fi;
    aws iam create-virtual-mfa-device --virtual-mfa-device-name ${1} --bootstrap-method ${2} --outfile ${3} | jq .
    sameAs "aws iam create-virtual-mfa-device --virtual-mfa-device-name ${1} --bootstrap-method ${2} --outfile ${3}" ; echo
}
# aws iam create-virtual-mfa-device --virtual-mfa-device-name testuser200 --bootstrap-method Base32StringSeed  --outfile testusermfa.txt
# aws iam create-virtual-mfa-device --virtual-mfa-device-name testuser200 ---bootstrap-method QRCodePNG -outfile testuser.png

#.   usrmfadea - AWS IAM -- DEACTIVATE MFA for a given user
usrmfadea ()
{
  if (( $# < 2 )); then
    echo usage: Needs at least two arguments { --user-name USER-NAME --serial-number ARN-MFA-USER };
    return;
  fi;
    aws iam deactivate-mfa-device --user-name ${1} --serial-number ${2}
    sameAs "aws iam deactivate-mfa-device --user-name ${1} --serial-number ${2}" ; echo
}
# aws iam deactivate-mfa-device --user-name hamid.montazeri --serial-number arn:aws:iam::674553401808:mfa/hamid.montazeri

#.   usrmfadel - AWS IAM -- DELETE MFA for a given user
usrmfadel ()
{
  if (( $# < 1 )); then
    echo usage: Needs at least one arguments { --serial-number ARN-MFA-USER };
    return;
  fi;
    aws iam delete-virtual-mfa-device --serial-number ${1}
    sameAs "aws iam delete-virtual-mfa-device --serial-number ${1}" ; echo
}
# aws iam delete-virtual-mfa-device --serial-number arn:aws:iam::674553401808:mfa/testuser200

#  resync-mfa-device  -- aws iam resync-mfa-device --user-name Bob --serial-number arn:aws:iam::210987654321:mfa/BobsMFADevice --authentication-code-1 123456 --authentication-code-2 987654

#.
#. ACCESS KEYs

#.   usrakls - AWS IAM -- access key LIST for a given user
usrakls ()
{
  AWSusers=$(aws iam list-users --output json | grep UserName | cut -d':' -f2 | tr -d ' |"|,' | sort | uniq)
  for u in $AWSusers; do
    divText $u
    aws iam list-access-keys --user-name ${u} | jq .
  done
  sameAs "aws iam list-access-keys --user-name ${u}" ; echo
}

#.   usrakstat - AWS IAM -- access key DETAILS for a given user
usrakstat ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --user-name USER-NAME }'
    return;
  fi;
    aws iam list-access-keys --user-name ${1} | jq .
    sameAs "aws iam list-access-keys --user-name ${1}" ; echo
}

#.   usrakadd - AWS IAM -- access key ADD for a given user
usrakadd ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --user-name USER-NAME }'
    return;
  fi;
    aws iam create-access-key --user-name ${1} | jq .
    sameAs "aws iam create-access-key --user-name ${1}" ; echo
}

# (be sure and grab new secret key)

# usrakset act/dea - accesskey activate / deactivate for a given user  [  Active / Inactive ]


#.   usrakset - AWS IAM -- Access Key set to  [  Active / Inactive ]
usrakset()
{
  if (( $# < 3 )); then
    echo 'usage: Needs at least three argument { --user-name user-name --access-key-id KEY --status Active  [ Active / Inactive  ] }'
    return;
  fi;
    aws iam update-access-key --user-name ${1} --access-key-id ${2} --status ${3} | jq .
    sameAs "aws iam update-access-key --user-name ${1} --access-key-id ${2} --status ${3}"; echo
}
# aws iam update-access-key --user-name user-name --access-key-id AKIAJFJJYXVZ2X74MRQQ --status Active
# aws iam update-access-key --user-name user-name --access-key-id AKIAJFJJYXVZ2X74MRQQ --status Inactive

#.   usraklast - AWS IAM -- LAST ACTION with given access key
usraklast ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --user-name USER-NAME }'
    return;
  fi;
    aws iam get-access-key-last-used --access-key-id ${1} | jq .
    sameAs "aws iam get-access-key-last-used --access-key-id ${1}"; echo
}

#.   usrakdel - AWS IAM -- access key DEL for a given user
usrakdel ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least one argument { --access-key ACCESS-KEY --user-name USER-NAME}'
    return;
  fi;
    aws iam delete-access-key --access-key ${1} --user-name ${2} | jq .
    sameAs "aws iam delete-access-key --access-key ${1} --user-name ${2}"; echo
}

#.
#. PASSWORDs

#.   usrpwinit - AWS IAM -- INIT user password - needed for fist time
usrpwinit ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least two argument { --user-name USER-NAME --password NEWPASSWD }'
    return;
  fi;
    aws iam create-login-profile --user-name ${1} --password ${2} | jq .
    sameAs "aws iam create-login-profile --user-name ${1} --password ${2}"; echo
}
# aws iam create-login-profile --user-name MyUser --password TXlVc2VyCg$$

#.   usrpwrst - AWS IAM -- RESET user password - will also set a flag for reset on login
usrpwrst ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least two argument { --user-name USER-NAME --password NEWPASSWD }'
    return;
  fi;
    aws iam update-login-profile --user-name ${1} --password ${2} --password-reset-required | jq .
    sameAs "aws update-login-profile --user-name ${1} --password ${2} --password-reset-required"; echo
}
# aws iam update-login-profile --user-name matthew.baumgartner --password TXlVc2FOOVyCg$$ --password-reset-required

#.
#. POLICYs

#.   polcheat  - AWS IAM -- Print brief AWSeasy IAM Cheats
polcheat ()
{
  echo "${YELLOW}Brief HELPS for AWSeasy IAM Policy Commands"
  echo
  echo  "${GREEN}  polawsls   -  ${WHITE}LIST policy library with an AWS scope"
  echo  "${GREEN}  polallls   -  ${WHITE}LIST policy library regardless of scope"
  echo
  echo  "${GREEN}  polstat    -  ${WHITE}STAT of a given policy"
  echo  "${GREEN}  poldump    -  ${WHITE}DUMP full JSON of a given policy"
  echo  "${GREEN}  polslurp   -  ${WHITE}SLURP (Create) a new custom policy from a given JSON file"
  echo
  echo  "${GREEN}  polusrls   -  ${WHITE}LIST attached-USER-policies per a given USER-NAME"
  echo  "${GREEN}  polgrpls   -  ${WHITE}LIST attached-GROUP-policies per a given GROUP"
  echo
  echo  "${GREEN}  polgrpatt  -  ${WHITE}ATTACH a policy to a given GROUP"
  echo  "${GREEN}  polgrpdet  -  ${WHITE}DETTACH a policies from a given GROUP"
  echo  "${RESET}"
}

#.   polawsls  - AWS IAM -- LIST policy library with an AWS scope
polawsls ()
{
   aws iam list-policies --scope AWS | jq .
   sameAs 'aws iam list-policies --scope AWS'; echo
}
# aws iam list-policies --scope AWS

#.   polallls  - AWS IAM -- LIST policy library regardless of scope
polallls ()
{
   aws iam list-policies | jq .   # No Scope
   sameAs 'aws iam list-policies'; echo
}
# aws iam list-policies

#.   polstat  - AWS IAM -- STAT of a given policy
polstat ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --policy-arn ARN }'
    return;
  fi;
   aws iam get-policy --policy-arn ${1} | jq .   # No Scope
   sameAs "aws iam get-policy --policy-arn ${1}"; echo
}
# aws iam get-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess

#.   poldump  - AWS IAM -- DUMP full JSON of a given policy
poldump ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least two argument { --policy-arn ARN --version-id vID }'
    return;
  fi;
   aws iam get-policy-version --policy-arn ${1} --version-id ${2} | jq .
   sameAs "aws iam get-policy-version --policy-arn ${1} --version-id ${2}"; echo
}
# aws iam get-policy-version --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --version-id v1

#.   polslurp  - AWS IAM -- SLURP (Create) a new custom policy from a given JSON file
polslurp ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least two argument { --policy-name my-policy --policy-document file://policy }'
    return;
  fi;
   aws iam create-policy --policy-name ${1} --policy-document ${2} | jq .
   sameAs "aws iam create-policy --policy-name ${1} --policy-document ${2}"; echo
}
# aws iam create-policy --policy-name my-policy --policy-document file://policy

# set-default-policy-version
# aws iam set-default-policy-version --policy-arn arn:aws:iam::123456789012:policy/MyPolicy --version-id v2

# list-saml-providers
# aws iam list-saml-providers

#.   polusrls  - AWS IAM -- LIST attached-USER-policies per a given USER-NAME
polusrls ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --user-name USER-NAME }'
    return;
  fi;
    aws iam list-attached-user-policies --user-name ${1} | jq .
    sameAs "aws iam list-attached-user-policies --user-name ${1}"; echo
}
# aws iam list-attached-userpolicies --user-name USER-NAME MyUser

#.   polgrpls  - AWS IAM -- LIST attached-GROUP-policies per a given GROUP
polgrpls ()
{
  if (( $# < 1 )); then
    echo 'usage: Needs at least one argument { --group-name GROUP-NAME }'
    return;
  fi;
    aws iam list-attached-group-policies --group-name ${1} | jq .
    sameAs "aws iam list-attached-group-policies --group-name ${1}"; echo
}
# aws iam list-attached-group-policies --group-name MyTestGroup2

# future feature
# aws iam get-group-policy --group-name Test-Group --policy-name S3-ReadOnly-Policy
# aws iam get-group-policy --group-name dev_group --policy-name ReadOnlyAccess

#.   polgrpatt  - AWS IAM -- ATTACH a policy to a given GROUP
polgrpatt ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least one argument { --policy-arn ARM --group-name GROUP-NAME }'
    return;
  fi;
    aws iam attach-group-policy  --policy-arn ${1} --group-name ${2} | jq .
    sameAs "aws iam attach-group-policy  --policy-arn ${1} --group-name ${2}"; echo
}
# aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/S3FullAccess' --group-name 'S3FullAccess001'

#.   polgrpdet  - AWS IAM -- DETTACH a policies from a given GROUP
polgrpdet ()
{
  if (( $# < 2 )); then
    echo 'usage: Needs at least one argument { --policy-arn ARM --group-name GROUP-NAME }'
    return;
  fi;
    aws iam detach-group-policy  --policy-arn ${1} --group-name ${2} | jq .
    sameAs "aws iam detach-group-policy  --policy-arn ${1} --group-name ${2}"; echo
}
# aws iam detach-group-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess --group-name MyTestGroup2

#.
#. SIGN-CERTs
#.
#. PROFILEs
#.
#. Reports & Summaaries
#.

#.  iampolls - AWS IAM -- Display password policy
iampolls ()
{
    aws iam get-account-password-policy | jq .
    sameAs 'aws iam get-account-password-policy'
}

#.  iampolset - AWS IAM -- Display password policy
iampolset ()
{

echo 'Cut & Paste the floowing template, after editing. '
echo
echo  ${YELLOW}
echo  'aws iam update-account-password-policy \  '
echo  '  --minimum-password-length 14 \          '
echo  '  --allow-users-to-change-password \      '
echo  '  --require-lowercase-characters \        '
echo  '  --require-uppercase-characters \        '
echo  '  --require-numbers \                     '
echo  '  --password-reuse-prevention 8 \         '
echo  '  --no-hard-expiry \                      '
echo  '  --max-password-age 120                  '
echo

echo  ${RESET}
sameAs 'aws iam update-account-password-policy'
}

#.
#.  iamreport - AWS IAM -- Account wide scan of users, groups and affiliation
iamreport()
{
  myACCOUNT=$(aws iam list-account-aliases | tr -d '{|}|[|]|"| ' | egrep -v ':|^$');
  myACCNTID=$(aws iam get-user | grep Arn | cut -d':' -f2- | tr -d '"' | cut -d':' -f5);
  myREGION=$(aws configure list | grep region | awk '{print $2}' | tr -d ' ');

  triplewide Account $myACCNTID Alias $myACCOUNT Region $myREGION; echo ${RESET}
  divText root
  aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=root | grep EventName | sort | uniq -c | column -t
  echo

  AWSusers=$(aws iam list-users --output json | grep UserName | cut -d':' -f2 | tr -d ' |"|,' | sort | uniq)
  for u in $AWSusers; do
    divText $u
      aws iam get-user --user-name $u | grep PasswordLastUsed | tr -d '"|,' | tr -s ' '

    sideHead "RECENT-ACTIONS-LAST-7-DAYS"
      aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$u | grep EventName | sort | uniq -c | tr -s ' '
    sideHead "ACCESS-KEYS"
      aws iam list-access-keys --user-name $u | egrep "AccessKeyId|Status"
    sideHead "MFA-DEVICES"
      aws iam list-mfa-devices --user-name $u | egrep "SerialNumber|EnableDate"
    sideHead "GROUPS"
      aws iam list-groups-for-user --user-name $u | grep "GroupName"
    sideHead "POLICIES"
        aws iam list-attached-user-policies --user-name $u | grep "PolicyName"
        aws iam list-user-policies --user-name $u | jq .  
    echo
done
}

#.  iamsummary - AWS IAM -- Display account summary
iamsummary ()
{
    aws iam get-account-summary | jq .
    sameAs 'aws iam get-account-summary'
}

# fin
