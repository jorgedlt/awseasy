# awseasy.asg

#.
#. AWS SecurityGroup commands
#.

#.  sgls - AWS EC2 -- List SecurityGroup (Brief)
sgls() {

 sgDESC=$( aws ec2 describe-security-groups --output text )
 sgLIST=$( echo "$sgDESC" | grep SECURITYGROUPS )

for sg in $( echo "$sgLIST" | grep .sg | cut -d$'\t' -f3 | sort | uniq ); do
sgTAG='null'

sgDESC=$( aws ec2 describe-security-groups --group-ids ${sg} --output text )
sgNAME=$( echo "${sgDESC}" | sed -e 's/sg-/\nsg-/' | grep SECURITYGROUPS | sed 's/SECURITYGROUPS/Security Group/g' | tr ' ' '.' | tr -d ' ' | cut -c16- )
sgTAG=$( echo "${sgDESC}" | grep 'TAGS.\+Name' | awk '{print $3}' )

echo "TAG [${YELLOW} ${sgTAG} ${WHITE}] SG [${YELLOW} ${sg} ${WHITE}] ${WHITE}Security Group [${YELLOW}   ${sgNAME}${WHITE}]"
    echo ${WHITE}
done
}

sglsall() {

 sgDESC=$( aws ec2 describe-security-groups --output text )
 sgLIST=$( echo "$sgDESC" | grep SECURITYGROUPS )

for sg in $( echo "$sgLIST" | grep .sg | cut -d$'\t' -f3 | sort | uniq ); do

 sgTAG='null'
 sgDESC=$(aws ec2 describe-security-groups --group-ids ${sg} --output text)
 sgNAME=$(echo "${sgDESC}" | sed -e 's/sg-/\nsg-/' | grep SECURITYGROUPS | sed 's/SECURITYGROUPS/Security Group/g' | tr ' ' '.' | tr -d ' ' | cut -c16- )
 sgTAG=$(echo "${sgDESC}" | grep 'TAGS.\+Name' | awk '{print $3}'  )

 echo "${WHITE}Security Group [${YELLOW}    ${sgNAME}${WHITE}] TAG [${YELLOW} ${sgTAG} ${WHITE}] SG [${YELLOW} ${sg} ${WHITE}]"

 #
    for i in 0 1 2 3 4 5 6 7 8 9 ; do

      #
      inbound=$(aws ec2 describe-security-groups --group-ids  ${sg} | jq ".SecurityGroups[0] .IpPermissions[$i]" )

        [[ $inbound = 'null' ]] && break

            FromPort=$(echo "${inbound}" | grep 'FromPort' | cut -d':' -f2 | tr -dc '0-9' )
            CidrIp=$(echo "${inbound}" | grep 'CidrIp' | cut -d':' -f2 | tr -d '"| ' | tr '\012' ' ')
            IpProtocol=$(echo "${inbound}" | grep 'IpProtocol' | cut -d':' -f2 | tr -d '"| |,|:')

            echo "${MAGENTA}INBOUND: ${GREEN}Open to [${YELLOW} $IpProtocol ${GREEN}] port [${YELLOW} $FromPort ${GREEN}] from these IP Address(es);"
            echo "   ${RED}$CidrIp"
            echo
    done
    #
    outbound=$(aws ec2 describe-security-groups --group-ids ${sg} | jq '.SecurityGroups[0] .IpPermissionsEgress[0]')

    [[ $outbound = 'null' ]] && break

        ToPort=$(echo "${outbound}" | grep 'ToPort' | cut -d':' -f2 | tr -dc '0-9' )
        CidrIp=$(echo "${outbound}" | grep 'CidrIp' | cut -d':' -f2 | tr -d '"| ' | tr '\012' ' ')

        IpProtocol=$(echo "${outbound}" | grep 'IpProtocol' | cut -d':' -f2 | tr -d '"| |,|:')
        [[ "$IpProtocol" -eq -1 ]] && { IpProtocol='all-protocals' ; ToPort='all-ports' ; }

          echo "${MAGENTA}OUTBOUND: ${GREEN}Open to [${YELLOW} $IpProtocol ${GREEN}] port [${YELLOW} $ToPort ${GREEN}] to these IP Address(es);"
          echo "   ${RED}$CidrIp"
          echo

    echo ${WHITE}
done
}
#

#.  sgstat - AWS EC2 -- Desc specific SecurityGroup with INBOUND & OUTBOUND rules
sgstat() {

if (( $# < 1 )); then
 echo usage: Needs at least one argument {instance ID#}
 return
fi

sgDESC=$(aws ec2 describe-security-groups --group-ids ${1} --output text)
sgNAME=$(echo "${sgDESC}" | sed -e 's/sg-/\nsg-/' | grep SECURITYGROUPS | sed 's/SECURITYGROUPS/Security Group/g' | tr ' ' '.' | tr -d ' ' | cut -c16- )
sgTAG=$(echo "${sgDESC}" | grep 'TAGS.\+Name' | awk '{print $3}'  )

echo "${WHITE}Security Group [${YELLOW}    ${sgNAME}${WHITE}] TAG [${YELLOW} ${sgTAG} ${WHITE}] SG [${YELLOW} ${1} ${WHITE}]"

#
    for i in 0 1 2 3 4 5 6 7 8 9 ; do

      #
      inbound=$(aws ec2 describe-security-groups --group-ids  ${1} | jq ".SecurityGroups[0] .IpPermissions[$i]" )

        [[ $inbound = 'null' ]] && break

            FromPort=$(echo "${inbound}" | grep 'FromPort' | cut -d':' -f2 | tr -dc '0-9' )
            CidrIp=$(echo "${inbound}" | grep 'CidrIp' | cut -d':' -f2 | tr -d '"| ' | tr '\012' ' ')
            IpProtocol=$(echo "${inbound}" | grep 'IpProtocol' | cut -d':' -f2 | tr -d '"| |,|:')

            echo "${MAGENTA}INBOUND: ${GREEN}Open to [${YELLOW} $IpProtocol ${GREEN}] port [${YELLOW} $FromPort ${GREEN}] from these IP Address(es);"
            echo "   ${RED}$CidrIp"
            echo
    done
    #
    outbound=$(aws ec2 describe-security-groups --group-ids ${1} | jq '.SecurityGroups[0] .IpPermissionsEgress[0]')

    [[ $outbound = 'null' ]] && break

        ToPort=$(echo "${outbound}" | grep 'ToPort' | cut -d':' -f2 | tr -dc '0-9' )
        CidrIp=$(echo "${outbound}" | grep 'CidrIp' | cut -d':' -f2 | tr -d '"| ' | tr '\012' ' ')

        IpProtocol=$(echo "${outbound}" | grep 'IpProtocol' | cut -d':' -f2 | tr -d '"| |,|:')
        [[ "$IpProtocol" -eq -1 ]] && { IpProtocol='all-protocals' ; ToPort='all-ports' ; }

          echo "${MAGENTA}OUTBOUND: ${GREEN}Open to [${YELLOW} $IpProtocol ${GREEN}] port [${YELLOW} $ToPort ${GREEN}] to these IP Address(es);"
          echo "   ${RED}$CidrIp"
          echo
}

#.  sqscanip - AWS EC2 -- List all IPs in a common sorted and count pool, regardless of protocol or port
sqscanip() {

sgDESC=$( aws ec2 describe-security-groups --output text )
sgLIST=$( echo "$sgDESC" | grep SECURITYGROUPS )

for sg in $(echo "$sgLIST" | sed -e 's/sg-/\nsg-/' | grep ^sg | awk {'print $1'} | sort | uniq ); do
sgTAG='null'

sgDESC=$(aws ec2 describe-security-groups --group-ids ${sg} --output text)

echo "${WHITE}Scanning security-groups [${YELLOW} ${sg} ${WHITE}]"

    for i in 0 1 2 3 4 5 6 7 8 9 ; do
      inbound=$(aws ec2 describe-security-groups --group-ids  ${sg} | jq ".SecurityGroups[0] .IpPermissions[$i]" )
        [[ $inbound = 'null' ]] && break
            CidrIp=$(echo "${inbound}" | grep 'CidrIp' | cut -d':' -f2 | tr -d '"| ' | tr '\012' ' ')
            echo "$CidrIp" >> inbound.ip
    done

    outbound=$(aws ec2 describe-security-groups --group-ids ${sg} | jq '.SecurityGroups[0] .IpPermissionsEgress[0]')
    [[ $outbound = 'null' ]] && break
        CidrIp=$(echo "${outbound}" | grep 'CidrIp' | cut -d':' -f2 | tr -d '"| ' | tr '\012' ' ')
            echo "$CidrIp" >> outbound.ip
    echo ${WHITE}
done
#
echo INBOUND IP address rules in effect
 cat inbound.ip | tr ' ' '\012' | grep -v '^$' | sort -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n  | uniq -c

echo OUTBOUND IP address in use
 cat outbound.ip | tr ' ' '\012' | grep -v '^$' | sort -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n  | uniq -c

 rm -f inbound.ip outbound.ip
}

#.
#.  sgauthaddi -- ADD authorize security group ingress
sgauthaddi() {

if (( $# <4 )); then
 echo usage: Needs at least four arguments;
 echo "   sgauthaddi SGgroupID protocol port cidr"
 echo "   example; sgauthaddi 'sg-33d02057' tcp '22' '103.251.142.95/32'"
 echo " "
 echo " if unsure try; sgstat SGgroupID"
 return
fi

sameAs   "aws ec2 authorize-security-group-ingress  --group-id $1 --protocol $2 --port $3 --cidr $4"
  aws ec2 authorize-security-group-ingress  --group-id $1 --protocol $2 --port $3 --cidr $4
  sgstat $1 | grep $1
}

#.  sgauthdropi -- DROP authorize security group ingress
sgauthdropi() {

if (( $# < 4 )); then
 echo usage: Needs at least four arguments;
 echo "   sgauthdropi SGgroupID protocol port cidr"
 echo "   example; sgauthdrop 'sg-33d02057' tcp '22' '103.251.142.95/32'"
 echo " "
 echo " if unsure try; sgstat SGgroupID"
 return
fi

sameAs   "aws ec2 revoke-security-group-ingress  --group-id $1 --protocol $2 --port $3 --cidr $4"
  aws ec2 revoke-security-group-ingress --group-id $1 --protocol $2 --port $3 --cidr $4
  sgstat $1 | grep $1
}

###

#.  sgauthaddo -- ADD authorize security group egress
sgauthaddo() {

if (( $# <4 )); then
 echo usage: Needs at least four arguments;
 echo "   sgauthaddo SGgroupID protocol port cidr"
 echo "   example; sgauthaddo 'sg-33d02057' tcp '22' '103.251.142.95/32'"
 echo " "
 echo " if unsure try; sgstat SGgroupID"
 return
fi

sameAs   "aws ec2 authorize-security-group-egress  --group-id $1 --protocol $2 --port $3 --cidr $4"
  aws ec2 authorize-security-group-egress  --group-id $1 --protocol $2 --port $3 --cidr $4
  sgstat $1 | grep $1
}

#.  sgauthdropo -- DROP authorize security group egress
sgauthdropo() {

if (( $# < 4 )); then
 echo usage: Needs at least four arguments;
 echo "   sgauthdropo SGgroupID protocol port cidr"
 echo "   example; sgauthdropo 'sg-33d02057' tcp '22' '103.251.142.95/32'"
 echo " "
 echo " if unsure try; sgstat SGgroupID"
 return
fi

sameAs   "aws ec2 revoke-security-group-egress  --group-id $1 --protocol $2 --port $3 --cidr $4"
  aws ec2 revoke-security-group-egress --group-id $1 --protocol $2 --port $3 --cidr $4
  sgstat $1 | grep $1
}
