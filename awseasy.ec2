# awwseasy.ec2

#.
#. AWS EC2 Commands
#.

#.  ec2ls - AWS EC2 -- List Nodes, long format - awsls (Ullah's Version)
ec2ls () {
  aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,InstanceType,PrivateIpAddress,PublicIpAddress,Tags[?Key==`Name`].Value[]]' --output json | tr -d '\n[] "' | perl -pe 's/i-/\ni-/g' | tr ',' '\t' | sed -e 's/null/None/g' | grep '^i-' | column -t | ccze -A
}

#.  ec2desc - AWS EC2 -- Detail JSON dump of instance
ec2desc () {
  sameAs "aws ec2 describe-instances --instance-ids InstanceId"
  aws ec2 describe-instances --instance-ids $1 | pjson | ccze -A
}

# utility function for awsbrief
_ec2parse ()
{
  echo "${1}" | grep ${2} | head -1 | cut -d':' -f2- | tr -d ' |,|"';
}

#.  ec2stat - AWS EC2 -- breifly describe instances with key chosen parameters
ec2stat() {

      if (( $# < 1 )); then
         echo usage: Needs at least one argument {instance ID#}
       return
       fi

       AWSdesc=$(aws ec2 describe-instances --instance-ids $1);

#
      _VpcId=$(_ec2parse "$AWSdesc" VpcId)
      _InstanceNm=$(_ec2parse "$AWSdesc" Value)
      _InstanceId=$(_ec2parse "$AWSdesc" InstanceId)
      _InstanceType=$(_ec2parse "$AWSdesc" InstanceType)
      _NetworkInterfaceId=$(_ec2parse "$AWSdesc" NetworkInterfaceId)
      _MacAddress=$(_ec2parse "$AWSdesc" MacAddress)
      _SubnetId=$(_ec2parse "$AWSdesc" SubnetId)
      _PrivateIP=$(_ec2parse "$AWSdesc" PrivateIpAddress)

      _PublicIp=$(_ec2parse "$AWSdesc" PublicIpAddress)

      _LaunchTime=$(_ec2parse "$AWSdesc" LaunchTime)
      _VpcId=$(_ec2parse "$AWSdesc" VpcId)
      _ImageId=$(_ec2parse "$AWSdesc" ImageId)
      _GroupIds=$(_ec2parse "$AWSdesc" GroupId)
      _KeyName=$(_ec2parse "$AWSdesc" KeyName)
      _AZone=$(_ec2parse "$AWSdesc" AvailabilityZone)
      _EC2State=$(_ec2parse "$AWSdesc" running)
      _GroupName=$(_ec2parse "$AWSdesc" GroupName)
#
     descDUMP InstanceName $_InstanceNm InstanceID $_InstanceId;
     descDUMP TYPE $_InstanceType ImageId $_ImageId;
     descDUMP PrivateIP $_PrivateIP PublicIP $_PublicIp;
     descDUMP SubNet $_SubnetId VPC $_VpcId;
     descDUMP NetIFACE $_NetworkInterfaceId NetMAC $_MacAddress;
     descDUMP STATE $_EC2State DATE $_LaunchTime;
     descDUMP sg $_GroupIds sgNAME $_GroupName;
     descDUMP KEY $_KeyName AZ $_AZone
}

#.  ec2clone - AWS EC2 -- creates new clone EC2
ec2clone ()
{
 AWSdesc=$(aws ec2 describe-instances --instance-ids $1);

# parse exsisting values
  _VpcId=$(ec2parse "$AWSdesc" VpcId)
  _ImageId=$(ec2parse "$AWSdesc" ImageId)
  _InstanceType=$(ec2parse "$AWSdesc" InstanceType)
  _SubnetId=$(ec2parse "$AWSdesc" SubnetId)
  _KeyName=$(ec2parse "$AWSdesc" KeyName)
  _AvailabilityZone=$(ec2parse "$AWSdesc" AvailabilityZone)
  _GroupId=$(ec2parse "$AWSdesc" GroupId)

  # special case - Powered EC2 - Provide Warning
   _EC2State=$(ec2parse "$AWSdesc" running)

  # special case - Public IP address
   _PublicIP=$(ec2parse "$AWSdesc" PublicIpAddress)

  # special case - Extra EBS Volume
   _VolumeId=$(ec2parse "$AWSdesc" VolumeId)
   VOLdesc=$(aws ec2 describe-volumes --volume-ids ${_VolumeId})
   _Size=$(ec2parse "$VOLdesc" Size)

 #
  echo " cut and paste following AWS CLI string to recreate a new EC2 "
  echo "==="

  echo "aws ec2 run-instances \\"
  echo "  --count 1 \\"
  echo "  --image-id ${_ImageId} \\"
  echo "  --key-name ${_KeyName} \\"
  echo "  --security-group-ids ${_GroupId} \\"
  echo "  --subnet-id ${_SubnetId} \\";
  echo "  --instance-type ${_InstanceType} \\"

  [ ! "$_PublicIP" ] && {
      echo "  --no-associate-public-ip-address \\"
    } || {
      echo "  --associate-public-ip-address \\"
    }
  #
  [[ "$_Size" -gt 8 ]] && {
      echo '  --block-device-mappings "[{\"DeviceName\": \"/dev/sda1\",\"Ebs\":{\"VolumeSize\":32}}]" \'
    } || {
            :              # Do Nothing
    }

  echo "  --placement AvailabilityZone=${_AvailabilityZone}\\";
  echo "  --query 'Instances[0].InstanceId'"

  echo "==="
  [ ! "$_EC2State" ] && {
      echo -n "  WARNING: EC2 is not running - therefore"
      echo " Public IP address assignment may not be accurate"
    } || {
      echo "  No Errors"
    }
}

#.  awswho - AWS EC2 -- Show which enviroment is active
awswho() {
  #sameAs " aws iam list-account-aliases --output text"
  #aws iam list-account-aliases --output text | awk '{print $2}' | figlet
  echo -e "   " | tr -d '\n' ; aws iam list-account-aliases --output text | ccze -A
  #date
}

#  awswho - for Scripts
awswho-s() {
  divText $(aws iam list-account-aliases --output text | tr 'a-z' 'A-Z' | awk '{print $2}' | ccze -A)
}

#.  ec2start - AWS EC2 -- Start an EC2 Instance
ec2start() {
   if (( $# < 1 )); then
    echo usage: Needs at least one argument {instance ID#}
    return
   fi

    sameAs "aws ec2 start-instances --instance-ids instance-id#"
    aws ec2 start-instances --instance-ids $@
}

#.  ec2stop - AWS EC2 -- Stop an EC2 Instance
ec2stop() {
if (( $# < 1 )); then
 echo usage: Needs at least one argument {instance ID#}
 return
fi
  sameAs "aws ec2 stop-instances --instance-ids instance-id#"
  aws ec2 stop-instances --instance-ids $@
}

#.  ec2kill - AWS EC2 -- Terminate an EC2 Instance
ec2kill() {
 if (( $# < 1 )); then
   echo usage: Needs at least one argument {instance ID#}
   return
 fi
#
 read -p "Are you sure you want to continue? <y/N> " prompt
 if [[ $prompt == "y" || $prompt == "Y" || $prompt == "yes" || $prompt == "Yes" ]]
 then
   sameAs "aws ec2 terminate-instances --instance-ids instance-id#"
   aws ec2 terminate-instances --instance-ids $@
 else
   return
 fi
}
