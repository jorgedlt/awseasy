# awwseasy.ec2

#.
#. AWS EC2 Commands
#.

#.  ec2ls - AWS EC2 -- List Nodes, long format - awsls (Ullah's Version)
ec2ls () {
  aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,VpcId,InstanceType,PrivateIpAddress,PublicIpAddress,Tags[?Key==`Name`].Value[]]' --output json | tr -d '\n[] "' | perl -pe 's/i-/\ni-/g' | tr ',' '\t' | sed -e 's/null/None/g' | grep '^i-' | column -t | ccze -A
  basedOn "aws ec2 describe-instances"

}

#  ec2tag - AWS EC2 -- EC2 retag - might work well with any resource (awstag)
ec2tag () {
  aws ec2 create-tags --resources "${1}" --tags Key=Name,Value="${2}"
  sameAs "aws ec2 create-tags --resources "${1}" --tags Key=Name,Value="${2}""

}

# utility function for awsbrief # # # # # #
_ec2parse ()
{
  echo "${1}" | grep -w ${2} | head -1 | cut -d':' -f2- | tr -d ' |,|"';
}

# utility function for awsbrief # # # # # #
_ec2parstl ()
{
  echo "${1}" | grep -w ${2} | tail -1 | cut -d':' -f2- | tr -d ' |,|"';
}

#.  ec2stat - AWS EC2 -- briefly describe instances with key chosen parameters
ec2stat() {

      if (( $# < 1 )); then
         echo usage: Needs at least one argument {instance ID#}
       return
       fi

       AWSdesc=$(aws ec2 describe-instances --instance-ids $1);
#
      _VpcId=$(_ec2parse "$AWSdesc" VpcId)
      _InstanceNm=$(_ec2parse "$AWSdesc" Value)
      _InstanceId=$(_ec2parse "$AWSdesc" InstanceId)
      _InstanceType=$(_ec2parse "$AWSdesc" InstanceType)
      _NetworkInterfaceId=$(_ec2parse "$AWSdesc" NetworkInterfaceId)
      _MacAddress=$(_ec2parse "$AWSdesc" MacAddress)
      _SubnetId=$(_ec2parse "$AWSdesc" SubnetId)
      _PrivateIP=$(_ec2parse "$AWSdesc" PrivateIpAddress)

      _PublicIp=$(_ec2parse "$AWSdesc" PublicIpAddress)

      _LaunchTime=$(_ec2parse "$AWSdesc" LaunchTime)
      _VpcId=$(_ec2parse "$AWSdesc" VpcId)
      _ImageId=$(_ec2parse "$AWSdesc" ImageId)
      _GroupIds=$(_ec2parse "$AWSdesc" GroupId)
      _KeyName=$(_ec2parse "$AWSdesc" KeyName)
      _AZone=$(_ec2parse "$AWSdesc" AvailabilityZone)
      _EC2State=$(_ec2parse "$AWSdesc" running)
      _GroupName=$(_ec2parse "$AWSdesc" GroupName)
#
     descDUMP InstanceName $_InstanceNm InstanceID $_InstanceId;
     descDUMP TYPE $_InstanceType ImageId $_ImageId;
     descDUMP PrivateIP $_PrivateIP PublicIP $_PublicIp;
     descDUMP SubNet $_SubnetId VPC $_VpcId;
     descDUMP NetIFACE $_NetworkInterfaceId NetMAC $_MacAddress;
     descDUMP STATE $_EC2State DATE $_LaunchTime;
     descDUMP sg $_GroupIds sgNAME $_GroupName;
     descDUMP KEY $_KeyName AZ $_AZone

     basedOn "aws ec2 describe-instances --instance-ids $1)"

}

#.  ec2dump - AWS EC2 -- dump EC2 JSON
ec2dump() {

     if (( $# < 1 )); then
        echo usage: Needs at least one argument {instance ID#}
        return
     fi

     aws ec2 describe-instances --instance-ids ${1} | jq .
     sameAs "aws ec2 describe-instances --instance-ids ${1}"
     echo
}

#.  ec2scan - AWS EC2 -- Scan all Regions for EC2s running or stopped
ec2scan () {
  awsREGIONS=$( aws ec2 describe-regions | grep RegionName | cut -d':' -f2 | tr -d ' |,|"' | sort -r | uniq )

for thisregion in $awsREGIONS
do
  echo ${RESET}$thisregion
  export AWS_DEFAULT_REGION=$thisregion

  EventsTR=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,VpcId,InstanceType,PrivateIpAddress,PublicIpAddress,Tags[?Key==`Name`].Value[]]' --output json | tr -d '\n[] "')

  [ -z "$EventsTR" ] && {
    : # echo "no EC2s found this region $thisregion"
    } || {
    echo "  some EC2 found this region $thisregion"
    ec2ls
    echo =====================================================================
   }
done
}
#

#.  ec2clone - AWS EC2 -- creates new clone EC2
ec2clone ()
{
 AWSdesc=$(aws ec2 describe-instances --instance-ids $1);

# parse exsisting values
  _VpcId=$(_ec2parse "$AWSdesc" VpcId)
  _ImageId=$(_ec2parse "$AWSdesc" ImageId)
  _InstanceType=$(_ec2parse "$AWSdesc" InstanceType)
  _SubnetId=$(_ec2parse "$AWSdesc" SubnetId)
  _KeyName=$(_ec2parse "$AWSdesc" KeyName)
  _AvailabilityZone=$(_ec2parse "$AWSdesc" AvailabilityZone)
  _GroupId=$(_ec2parse "$AWSdesc" GroupId)

  # special case - Powered EC2 - Provide Warning
   _EC2State=$(_ec2parse "$AWSdesc" running)

  # special case - Public IP address
   _PublicIP=$(_ec2parse "$AWSdesc" PublicIpAddress)

  # special case - Extra EBS Volume
   _VolumeId=$(_ec2parse "$AWSdesc" VolumeId)
   VOLdesc=$(aws ec2 describe-volumes --volume-ids ${_VolumeId})
   _Size=$(_ec2parse "$VOLdesc" Size)

 #
  echo " cut and paste following AWS CLI string to recreate a new EC2 "
  echo "==="

  echo "aws ec2 run-instances \\"
  echo "  --count 1 \\"
  echo "  --image-id ${_ImageId} \\"
  echo "  --key-name ${_KeyName} \\"
  echo "  --security-group-ids ${_GroupId} \\"
  echo "  --subnet-id ${_SubnetId} \\";
  echo "  --instance-type ${_InstanceType} \\"

  [ ! "$_PublicIP" ] && {
      echo "  --no-associate-public-ip-address \\"
    } || {
      echo "  --associate-public-ip-address \\"
    }
  #
  [[ "$_Size" -gt 8 ]] && {
      echo '  --block-device-mappings "[{\"DeviceName\": \"/dev/sda1\",\"Ebs\":{\"VolumeSize\":32}}]" \'
    } || {
            :              # Do Nothing
    }

  echo "  --placement AvailabilityZone=${_AvailabilityZone}\\";
  echo "  --query 'Instances[0].InstanceId'"

  echo "==="
  [ ! "$_EC2State" ] && {
      echo -n "  WARNING: EC2 is not running - therefore"
      echo " Public IP address assignment may not be accurate"
    } || {
      echo "  No Errors"
    }
}

#.  awswho - AWS EC2 -- Show which environment is active
awswho() {
  #sameAs " aws iam list-account-aliases --output text"
  #aws iam list-account-aliases --output text | awk '{print $2}' | figlet
  echo -e "   " | tr -d '\n' ; aws iam list-account-aliases --output text | ccze -A
  sameAs "aws iam list-account-aliases"
}


#.  ec2start - AWS EC2 -- Start an EC2 Instance
ec2start() {
   if (( $# < 1 )); then
    echo usage: Needs at least one argument {instance ID#}
    return
   fi

    aws ec2 start-instances --instance-ids "$@" | jq .
    sameAs "aws ec2 start-instances --instance-ids ###"
}

#.  ec2stop - AWS EC2 -- Stop an EC2 Instance
ec2stop() {
if (( $# < 1 )); then
 echo usage: Needs at least one argument {instance ID#}
 return
fi
  aws ec2 stop-instances --instance-ids "$@" | jq .
  sameAs "aws ec2 stop-instances --instance-ids ###"
}

#.  ec2kill - AWS EC2 -- Terminate an EC2 Instance
ec2kill() {
 if (( $# < 1 )); then
   echo usage: Needs at least one argument {instance ID#}
   return
 fi
#
 # read -p "Are you sure you want to continue? <y/N> " prompt
 # if [[ $prompt == "y" || $prompt == "Y" || $prompt == "yes" || $prompt == "Yes" ]]
 # then
   aws ec2 terminate-instances --instance-ids "$@" | jq .
   sameAs "aws ec2 terminate-instances --instance-ids ###"
 # else
 #  return
 # fi
}

#.  ec2type - List current ec2 list - as reference $$$
ec2type() {
  cat ~/.awseasy/ec2.type.csv | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S | ccze -A
}

##### VOLs

#.  volls - List current ec2 volome list
volls() {

  VOLSraw=$(aws ec2 describe-volumes | grep VolumeId | cut -d':'  -f2 | tr -d '"| |,' | sort | uniq)
  #_InstanceId=$(_ec2parse "$VOLSraw" InstanceId)

for v in $VOLSraw; do

  thisVOL=$(aws ec2 describe-volumes --volume-ids ${v})
  #
  _InstanceId=$(_ec2parse "$thisVOL" InstanceId)

  # Get the Name of the Assoc EC2
  Instances=$(aws ec2 describe-instances --instance-ids $_InstanceId)
     _VolumeName=$(_ec2parse "$Instances" Value | cut -c1-80 )

  #_VolumeID=$(_ec2parse "$thisVOL" _VolumeId)
  _VolAZ=$(_ec2parse "$thisVOL" AvailabilityZone)
  _CreateTime=$(_ec2parse "$thisVOL" CreateTime)
  _AttachTime=$(_ec2parse "$thisVOL" AttachTime)
  _VolType=$(_ec2parse "$thisVOL" VolumeType)
  _VolSize=$(_ec2parse "$thisVOL" Size)

  _Volterm=$(_ec2parse "$thisVOL" DeleteOnTermination)

  _VolAttach=$( _ec2parse "$thisVOL" State)
  _VolInUse=$( _ec2parstl "$thisVOL" State)

  _SnapshotId=$(_ec2parse "$thisVOL" SnapshotId)

  # reset values
  #
  # An error occurred (InvalidSnapshot.NotFound) when calling the DescribeSnapshots
  # operation: The snapshot 'snap-3fc936ae' does not exist.

  [ -z $_SnapshotId  ] && {
      # No SNAP found
      _SnapshotId=0000 ;
  } || {
    # Get the data of the SNAP
    SNAPraw=$(aws ec2 describe-snapshots --snapshot-ids $_SnapshotId 2>/dev/null)
     _SNAPtime=$(_ec2parse "$SNAPraw" StartTime)
     _SNAPcryp=$(_ec2parse "$SNAPraw" Encrypted)
     _SNAPdesc=$(_ec2parse "$SNAPraw" Description | cut -c1-80) # use singlewide
  }
  #
  echo VolumeID $v
  doubleDUMP Created $_CreateTime Attached $_AttachTime;
  doubleDUMP 'AZ' $_VolAZ 'Delete On Termination' $_Volterm;
  doubleDUMP 'Volume Type' $_VolType 'Volume Size' $_VolSize;

  doubleDUMP 'State' $_VolAttach 'State' $_VolInUse;

  echo "${RESET} EC2"
  doubleDUMP InstanceName $_VolumeName InstanceID $_InstanceId;
  echo "${RESET} SNAP"
  doubleDUMP 'Snapshot ID' $_SnapshotId 'Volume Size' $_VolSize;
  doubleDUMP 'Snapshot Date' $_SNAPtime 'Encrypted' $_SNAPcryp;
  singlewide 'SNAP Desc' $_SNAPdesc;
  echo ${RESET}

done
  basedOn "aws ec2 describe-volumes"
}

##### SNAPs



###### AMIs

# fin
