# awseasy.lda

#.
#. AWS Lambda commands
#.

#.  lambdals - AWS LAMBDA -- List lambda, short format
lambdals () {

LDAlist=$( aws lambda list-functions | grep 'FunctionName' | cut -d':' -f2 | grep -v '\[\]' | tr -d ' |"|:|,' );

for ldaID in $LDAlist; do

       LDAdesc=$(aws lambda get-function --function-name "${ldaID}")
       LDAxtra=$(aws lambda list-aliases --function-name "${ldaID}")

         _LDAfunc=$( _ec2parse "$LDAdesc" FunctionName )
         _LDArun=$( _ec2parse "$LDAdesc" Runtime )
         _LDAdesc=$( _ec2parse "$LDAdesc" Description )
         _LDALastMod=$( _ec2parse "$LDAdesc" LastModified )
         _LDAmemsize=$( _ec2parse "$LDAdesc" MemorySize )
         _LDAcodesize=$( _ec2parse "$LDAdesc" CodeSize )
         _LDArunt=$( _ec2parse "$LDAdesc" Runtime )

         _LDAversion=$( _ec2parse "$LDAxtra" FunctionVersion )
         _LDAqualifier=$( _ec2parse "$LDAxtra" Name )

       LDAdetails=$(aws lambda get-function-configuration --function-name "${ldaID}" --qualifier "${_LDAqualifier}")
       # aws lambda get-function-configuration --function-name toolconnect-refresh --qualifier stage

        # LastModified
        _LDALastMod=$( _ec2parse "$LDAdetails" LastModified )
        # Description
        _LDAdesc=$( _ec2parse "$LDAdetails" Description )
        # Handler
        _LDAhdlr=$( _ec2parse "$LDAdetails" Handler )
        # TimeOut
        _LDAtime=$( _ec2parse "$LDAdetails" Timeout )
        # CodeSha256
        _LDAcsha=$( _ec2parse "$LDAdetails" CodeSha256 )

        #
         descDUMP Lambda $ldaID Name $_LDAfunc;
         descDUMP Last $_LDALastMod TimeOut $_LDAtime;
         descDUMP Qualifier $_LDAqualifier Version $_LDAversion;

         descDUMP MEMsize $_LDAmemsize Handler $_LDAhdlr;
         descDUMP CodeSHA $_LDAcsha CodeSize $_LDAcodesize;
         echo

done
}

#.  lambdastat - AWS LAMBDA -- Stat lambda, Long format
lambdastat () {

ldaID=$1
echo lambda $ldaID

     LDAdesc=$(aws lambda get-function --function-name "${ldaID}")
     LDAxtra=$(aws lambda list-aliases --function-name "${ldaID}")

       _LDAfunc=$( _ec2parse "$LDAdesc" FunctionName )
       _LDArun=$( _ec2parse "$LDAdesc" Runtime )
       _LDAdesc=$( _ec2parse "$LDAdesc" Description )
       _LDALastMod=$( _ec2parse "$LDAdesc" LastModified )
       _LDAmemsize=$( _ec2parse "$LDAdesc" MemorySize )
       _LDAcodesize=$( _ec2parse "$LDAdesc" CodeSize )
       _LDArunt=$( _ec2parse "$LDAdesc" Runtime )

       _LDAversion=$( _ec2parse "$LDAxtra" FunctionVersion )
       _LDAqualifier=$( _ec2parse "$LDAxtra" Name )

     LDAdetails=$(aws lambda get-function-configuration --function-name "${ldaID}" --qualifier "${_LDAqualifier}")
     # aws lambda get-function-configuration --function-name toolconnect-refresh --qualifier stage

      # LastModified
      _LDALastMod=$( _ec2parse "$LDAdetails" LastModified )
      # Description
      _LDAdesc=$( _ec2parse "$LDAdetails" Description )
      # Handler
      _LDAhdlr=$( _ec2parse "$LDAdetails" Handler )
      # TimeOut
      _LDAtime=$( _ec2parse "$LDAdetails" Timeout )
      # CodeSha256
      _LDAcsha=$( _ec2parse "$LDAdetails" CodeSha256 )

      #
       descDUMP Lambda $ldaID Name $_LDAfunc;
       descDUMP Last $_LDALastMod TimeOut $_LDAtime;
       descDUMP Qualifier $_LDAqualifier Version $_LDAversion;

      #
       # descDUMP Qualifier $_LDAqualifier Version $_LDAversion;
       # descDUMP Qualifier $_LDAqualifier Version $_LDAversion;
      #

       descDUMP MEMsize $_LDAmemsize Handler $_LDAhdlr;
       descDUMP CodeSHA $_LDAcsha CodeSize $_LDAcodesize;
       echo
}

#.  lambdadump - AWS LAMBDA -- lambda DUMP json
lambdadump () {

    if (( $# < 1 )); then
      echo usage: Needs at least one argument {RDS ID}
      return
    fi

echo LAMBDA $1

    aws lambda get-function --function-name "${ldaID}" | jq .
    echo
}

#.  lambdamake  - AWS LAMBDA -- feature coming soon
#.  lambdakill  - AWS LAMBDA -- feature coming soon
#.  lambdaclone - AWS LAMBDA -- feature coming soon

#.  lambdascan - AWS LAMBDA -- Scan all Regions for EC2s running or stopped
lambdascan () {
  awsREGIONS=$( aws ec2 describe-regions | grep RegionName | cut -d':' -f2 | tr -d ' |,|"' | sort -r | uniq )

for thisregion in $awsREGIONS
do
  echo ${RESET}$thisregion
  export AWS_DEFAULT_REGION=$thisregion

  EventsTR=$( aws lambda list-functions | grep 'FunctionName' )

  [ -z "$EventsTR" ] && {
    : # echo "no LAMBDAs found this region $thisregion"
    } || {
    echo "  some LAMBDAs found this region $thisregion"
    lambdals
    echo =====================================================================
   }
done
}
#
